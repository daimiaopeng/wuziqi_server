// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#include "base.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class cmdDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<cmd> _instance;
} _cmd_default_instance_;

class client_gobang_positionDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<client_gobang_position> _instance;
} _client_gobang_position_default_instance_;

class server_gobang_positionDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<server_gobang_position> _instance;
} _server_gobang_position_default_instance_;

class client_loginDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<client_login> _instance;
} _client_login_default_instance_;

class server_loginDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<server_login> _instance;
} _server_login_default_instance_;

class client_registerDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<client_register> _instance;
} _client_register_default_instance_;

class server_registerDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<server_register> _instance;
} _server_register_default_instance_;

class client_create_gameDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<client_create_game> _instance;
} _client_create_game_default_instance_;

class server_online_inforDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<server_online_infor> _instance;
} _server_online_infor_default_instance_;

class server_game_inviteDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<server_game_invite> _instance;
} _server_game_invite_default_instance_;

class client_game_inviteDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<client_game_invite> _instance;
} _client_game_invite_default_instance_;

class server_game_isInviteDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<server_game_isInvite> _instance;
} _server_game_isInvite_default_instance_;

class testDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<test> _instance;
} _test_default_instance_;

class chatMessageDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<chatMessage> _instance;
} _chatMessage_default_instance_;

class server_user_inforDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<server_user_infor> _instance;
} _server_user_infor_default_instance_;

class whoWinDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<whoWin> _instance;
} _whoWin_default_instance_;

class withDrawDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<withDraw> _instance;
} _withDraw_default_instance_;
static void InitDefaultsscc_info_chatMessage_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_chatMessage_default_instance_;
        new(ptr) ::chatMessage();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::chatMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_chatMessage_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_chatMessage_base_2eproto},
         {}};

static void InitDefaultsscc_info_client_create_game_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_client_create_game_default_instance_;
        new(ptr) ::client_create_game();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::client_create_game::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_client_create_game_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_client_create_game_base_2eproto},
         {}};

static void InitDefaultsscc_info_client_game_invite_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_client_game_invite_default_instance_;
        new(ptr) ::client_game_invite();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::client_game_invite::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_client_game_invite_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_client_game_invite_base_2eproto},
         {}};

static void InitDefaultsscc_info_client_gobang_position_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_client_gobang_position_default_instance_;
        new(ptr) ::client_gobang_position();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::client_gobang_position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_client_gobang_position_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_client_gobang_position_base_2eproto},
         {}};

static void InitDefaultsscc_info_client_login_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_client_login_default_instance_;
        new(ptr) ::client_login();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::client_login::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_client_login_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_client_login_base_2eproto},
         {}};

static void InitDefaultsscc_info_client_register_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_client_register_default_instance_;
        new(ptr) ::client_register();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::client_register::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_client_register_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_client_register_base_2eproto},
         {}};

static void InitDefaultsscc_info_cmd_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_cmd_default_instance_;
        new(ptr) ::cmd();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::cmd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_cmd_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_cmd_base_2eproto},
         {}};

static void InitDefaultsscc_info_server_game_invite_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_server_game_invite_default_instance_;
        new(ptr) ::server_game_invite();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::server_game_invite::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_server_game_invite_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_server_game_invite_base_2eproto},
         {}};

static void InitDefaultsscc_info_server_game_isInvite_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_server_game_isInvite_default_instance_;
        new(ptr) ::server_game_isInvite();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::server_game_isInvite::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_server_game_isInvite_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_server_game_isInvite_base_2eproto},
         {}};

static void InitDefaultsscc_info_server_gobang_position_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_server_gobang_position_default_instance_;
        new(ptr) ::server_gobang_position();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::server_gobang_position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_server_gobang_position_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_server_gobang_position_base_2eproto},
         {}};

static void InitDefaultsscc_info_server_login_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_server_login_default_instance_;
        new(ptr) ::server_login();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::server_login::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_server_login_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_server_login_base_2eproto},
         {}};

static void InitDefaultsscc_info_server_online_infor_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_server_online_infor_default_instance_;
        new(ptr) ::server_online_infor();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::server_online_infor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_server_online_infor_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_server_online_infor_base_2eproto},
         {}};

static void InitDefaultsscc_info_server_register_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_server_register_default_instance_;
        new(ptr) ::server_register();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::server_register::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_server_register_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_server_register_base_2eproto},
         {}};

static void InitDefaultsscc_info_server_user_infor_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_server_user_infor_default_instance_;
        new(ptr) ::server_user_infor();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::server_user_infor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_server_user_infor_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_server_user_infor_base_2eproto},
         {}};

static void InitDefaultsscc_info_test_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_test_default_instance_;
        new(ptr) ::test();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::test::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_test_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_test_base_2eproto},
         {}};

static void InitDefaultsscc_info_whoWin_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_whoWin_default_instance_;
        new(ptr) ::whoWin();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::whoWin::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_whoWin_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_whoWin_base_2eproto},
         {}};

static void InitDefaultsscc_info_withDraw_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_withDraw_default_instance_;
        new(ptr) ::withDraw();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::withDraw::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_withDraw_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_withDraw_base_2eproto},
         {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_base_2eproto[17];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const **file_level_enum_descriptors_base_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const **file_level_service_descriptors_base_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_base_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cmd, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::cmd, c_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::client_gobang_position, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::client_gobang_position, cmd_),
        PROTOBUF_FIELD_OFFSET(::client_gobang_position, x_),
        PROTOBUF_FIELD_OFFSET(::client_gobang_position, y_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::server_gobang_position, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::server_gobang_position, cmd_),
        PROTOBUF_FIELD_OFFSET(::server_gobang_position, x_),
        PROTOBUF_FIELD_OFFSET(::server_gobang_position, y_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::client_login, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::client_login, cmd_),
        PROTOBUF_FIELD_OFFSET(::client_login, username_),
        PROTOBUF_FIELD_OFFSET(::client_login, passwd_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::server_login, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::server_login, cmd_),
        PROTOBUF_FIELD_OFFSET(::server_login, issuccess_),
        PROTOBUF_FIELD_OFFSET(::server_login, message_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::client_register, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::client_register, cmd_),
        PROTOBUF_FIELD_OFFSET(::client_register, username_),
        PROTOBUF_FIELD_OFFSET(::client_register, passwd_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::server_register, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::server_register, cmd_),
        PROTOBUF_FIELD_OFFSET(::server_register, issuccess_),
        PROTOBUF_FIELD_OFFSET(::server_register, message_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::client_create_game, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::client_create_game, cmd_),
        PROTOBUF_FIELD_OFFSET(::client_create_game, withusername_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::server_online_infor, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::server_online_infor, cmd_),
        PROTOBUF_FIELD_OFFSET(::server_online_infor, people_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::server_game_invite, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::server_game_invite, cmd_),
        PROTOBUF_FIELD_OFFSET(::server_game_invite, people_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::client_game_invite, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::client_game_invite, cmd_),
        PROTOBUF_FIELD_OFFSET(::client_game_invite, code_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::server_game_isInvite, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::server_game_isInvite, cmd_),
        PROTOBUF_FIELD_OFFSET(::server_game_isInvite, code_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::test, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::test, cmd_),
        PROTOBUF_FIELD_OFFSET(::test, inform_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::chatMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::chatMessage, cmd_),
        PROTOBUF_FIELD_OFFSET(::chatMessage, data_),
        PROTOBUF_FIELD_OFFSET(::chatMessage, time_),
        PROTOBUF_FIELD_OFFSET(::chatMessage, type_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::server_user_infor, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::server_user_infor, cmd_),
        PROTOBUF_FIELD_OFFSET(::server_user_infor, name_),
        PROTOBUF_FIELD_OFFSET(::server_user_infor, integral_),
        PROTOBUF_FIELD_OFFSET(::server_user_infor, level_),
        PROTOBUF_FIELD_OFFSET(::server_user_infor, numsgame_),
        PROTOBUF_FIELD_OFFSET(::server_user_infor, win_),
        PROTOBUF_FIELD_OFFSET(::server_user_infor, lose_),
        PROTOBUF_FIELD_OFFSET(::server_user_infor, draw_),
        PROTOBUF_FIELD_OFFSET(::server_user_infor, gamecurrency_),
        PROTOBUF_FIELD_OFFSET(::server_user_infor, avatar_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::whoWin, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::whoWin, cmd_),
        PROTOBUF_FIELD_OFFSET(::whoWin, code_),
        PROTOBUF_FIELD_OFFSET(::whoWin, win_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::withDraw, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::withDraw, cmd_),
        PROTOBUF_FIELD_OFFSET(::withDraw, nums_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0,   -1, sizeof(::cmd)},
        {6,   -1, sizeof(::client_gobang_position)},
        {14,  -1, sizeof(::server_gobang_position)},
        {22,  -1, sizeof(::client_login)},
        {30,  -1, sizeof(::server_login)},
        {38,  -1, sizeof(::client_register)},
        {46,  -1, sizeof(::server_register)},
        {54,  -1, sizeof(::client_create_game)},
        {61,  -1, sizeof(::server_online_infor)},
        {68,  -1, sizeof(::server_game_invite)},
        {75,  -1, sizeof(::client_game_invite)},
        {82,  -1, sizeof(::server_game_isInvite)},
        {89,  -1, sizeof(::test)},
        {96,  -1, sizeof(::chatMessage)},
        {105, -1, sizeof(::server_user_infor)},
        {120, -1, sizeof(::whoWin)},
        {128, -1, sizeof(::withDraw)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const *const file_default_instances[] = {
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_cmd_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_client_gobang_position_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_server_gobang_position_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_client_login_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_server_login_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_client_register_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_server_register_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_client_create_game_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_server_online_infor_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_server_game_invite_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_client_game_invite_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_server_game_isInvite_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_test_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_chatMessage_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_server_user_infor_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_whoWin_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_withDraw_default_instance_),
};

const char descriptor_table_protodef_base_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
        "\n\nbase.proto\"\020\n\003cmd\022\t\n\001c\030\001 \001(\005\";\n\026client"
        "_gobang_position\022\013\n\003cmd\030\001 \001(\005\022\t\n\001x\030\002 \001(\005"
        "\022\t\n\001y\030\003 \001(\005\";\n\026server_gobang_position\022\013\n"
        "\003cmd\030\001 \001(\005\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\"=\n\014clie"
        "nt_login\022\013\n\003cmd\030\001 \001(\005\022\020\n\010username\030\002 \001(\t\022"
        "\016\n\006passwd\030\003 \001(\t\"\?\n\014server_login\022\013\n\003cmd\030\001"
        " \001(\005\022\021\n\tisSuccess\030\002 \001(\005\022\017\n\007message\030\003 \001(\t"
        "\"@\n\017client_register\022\013\n\003cmd\030\001 \001(\005\022\020\n\010user"
        "name\030\002 \001(\t\022\016\n\006passwd\030\003 \001(\t\"B\n\017server_reg"
        "ister\022\013\n\003cmd\030\001 \001(\005\022\021\n\tisSuccess\030\002 \001(\005\022\017\n"
        "\007message\030\003 \001(\t\"7\n\022client_create_game\022\013\n\003"
        "cmd\030\001 \001(\005\022\024\n\014withUsername\030\002 \001(\t\"2\n\023serve"
        "r_online_infor\022\013\n\003cmd\030\001 \001(\005\022\016\n\006people\030\002 "
        "\003(\t\"1\n\022server_game_invite\022\013\n\003cmd\030\001 \001(\005\022\016"
        "\n\006people\030\002 \001(\t\"/\n\022client_game_invite\022\013\n\003"
        "cmd\030\001 \001(\005\022\014\n\004code\030\002 \001(\005\"1\n\024server_game_i"
        "sInvite\022\013\n\003cmd\030\001 \001(\005\022\014\n\004code\030\002 \001(\005\"#\n\004te"
        "st\022\013\n\003cmd\030\001 \001(\005\022\016\n\006inform\030\002 \001(\t\"D\n\013chatM"
        "essage\022\013\n\003cmd\030\001 \001(\005\022\014\n\004data\030\002 \001(\t\022\014\n\004tim"
        "e\030\003 \001(\t\022\014\n\004type\030\004 \001(\005\"\260\001\n\021server_user_in"
        "for\022\013\n\003cmd\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\020\n\010integr"
        "al\030\003 \001(\005\022\r\n\005level\030\004 \001(\005\022\020\n\010numsGame\030\005 \001("
        "\005\022\013\n\003win\030\006 \001(\005\022\014\n\004lose\030\007 \001(\005\022\014\n\004draw\030\010 \001"
        "(\005\022\024\n\014gameCurrency\030\t \001(\005\022\016\n\006avatar\030\n \001(\014"
        "\"0\n\006whoWin\022\013\n\003cmd\030\001 \001(\005\022\014\n\004code\030\002 \001(\005\022\013\n"
        "\003win\030\003 \001(\t\"%\n\010withDraw\022\013\n\003cmd\030\001 \001(\005\022\014\n\004n"
        "ums\030\002 \001(\005b\006proto3";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable *const descriptor_table_base_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase *const descriptor_table_base_2eproto_sccs[17] = {
        &scc_info_chatMessage_base_2eproto.base,
        &scc_info_client_create_game_base_2eproto.base,
        &scc_info_client_game_invite_base_2eproto.base,
        &scc_info_client_gobang_position_base_2eproto.base,
        &scc_info_client_login_base_2eproto.base,
        &scc_info_client_register_base_2eproto.base,
        &scc_info_cmd_base_2eproto.base,
        &scc_info_server_game_invite_base_2eproto.base,
        &scc_info_server_game_isInvite_base_2eproto.base,
        &scc_info_server_gobang_position_base_2eproto.base,
        &scc_info_server_login_base_2eproto.base,
        &scc_info_server_online_infor_base_2eproto.base,
        &scc_info_server_register_base_2eproto.base,
        &scc_info_server_user_infor_base_2eproto.base,
        &scc_info_test_base_2eproto.base,
        &scc_info_whoWin_base_2eproto.base,
        &scc_info_withDraw_base_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_base_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_2eproto = {
        false, false, descriptor_table_protodef_base_2eproto, "base.proto", 1057,
        &descriptor_table_base_2eproto_once, descriptor_table_base_2eproto_sccs, descriptor_table_base_2eproto_deps, 17,
        0,
        schemas, file_default_instances, TableStruct_base_2eproto::offsets,
        file_level_metadata_base_2eproto, 17, file_level_enum_descriptors_base_2eproto,
        file_level_service_descriptors_base_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_base_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(
        &descriptor_table_base_2eproto)), true);

// ===================================================================

void cmd::InitAsDefaultInstance() {
}

class cmd::_Internal {
public:
};

cmd::cmd(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:cmd)
}

cmd::cmd(const cmd &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    c_ = from.c_;
    // @@protoc_insertion_point(copy_constructor:cmd)
}

void cmd::SharedCtor() {
    c_ = 0;
}

cmd::~cmd() {
    // @@protoc_insertion_point(destructor:cmd)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void cmd::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
}

void cmd::ArenaDtor(void *object) {
    cmd *_this = reinterpret_cast< cmd * >(object);
    (void) _this;
}

void cmd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void cmd::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const cmd &cmd::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_cmd_base_2eproto.base);
    return *internal_default_instance();
}


void cmd::Clear() {
// @@protoc_insertion_point(message_clear_start:cmd)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    c_ = 0;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *cmd::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 c = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *cmd::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:cmd)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 c = 1;
    if (this->c() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_c(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:cmd)
    return target;
}

size_t cmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmd)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // int32 c = 1;
    if (this->c() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_c());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void cmd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmd)
            GOOGLE_DCHECK_NE(&from, this);
    const cmd *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<cmd>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmd)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:cmd)
        MergeFrom(*source);
    }
}

void cmd::MergeFrom(const cmd &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmd)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.c() != 0) {
        _internal_set_c(from._internal_c());
    }
}

void cmd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmd)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void cmd::CopyFrom(const cmd &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmd)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool cmd::IsInitialized() const {
    return true;
}

void cmd::InternalSwap(cmd *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    swap(c_, other->c_);
}

::PROTOBUF_NAMESPACE_ID::Metadata cmd::GetMetadata() const {
    return GetMetadataStatic();
}


// ===================================================================

void client_gobang_position::InitAsDefaultInstance() {
}

class client_gobang_position::_Internal {
public:
};

client_gobang_position::client_gobang_position(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:client_gobang_position)
}

client_gobang_position::client_gobang_position(const client_gobang_position &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::memcpy(&cmd_, &from.cmd_,
             static_cast<size_t>(reinterpret_cast<char *>(&y_) -
                                 reinterpret_cast<char *>(&cmd_)) + sizeof(y_));
    // @@protoc_insertion_point(copy_constructor:client_gobang_position)
}

void client_gobang_position::SharedCtor() {
    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&y_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(y_));
}

client_gobang_position::~client_gobang_position() {
    // @@protoc_insertion_point(destructor:client_gobang_position)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void client_gobang_position::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
}

void client_gobang_position::ArenaDtor(void *object) {
    client_gobang_position *_this = reinterpret_cast< client_gobang_position * >(object);
    (void) _this;
}

void client_gobang_position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void client_gobang_position::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const client_gobang_position &client_gobang_position::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_client_gobang_position_base_2eproto.base);
    return *internal_default_instance();
}


void client_gobang_position::Clear() {
// @@protoc_insertion_point(message_clear_start:client_gobang_position)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&y_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(y_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *
client_gobang_position::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 cmd = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // int32 x = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
                    x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // int32 y = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
                    y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *client_gobang_position::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:client_gobang_position)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
    }

    // int32 x = 2;
    if (this->x() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
    }

    // int32 y = 3;
    if (this->y() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:client_gobang_position)
    return target;
}

size_t client_gobang_position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client_gobang_position)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_cmd());
    }

    // int32 x = 2;
    if (this->x() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_x());
    }

    // int32 y = 3;
    if (this->y() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_y());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void client_gobang_position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:client_gobang_position)
            GOOGLE_DCHECK_NE(&from, this);
    const client_gobang_position *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<client_gobang_position>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:client_gobang_position)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:client_gobang_position)
        MergeFrom(*source);
    }
}

void client_gobang_position::MergeFrom(const client_gobang_position &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client_gobang_position)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.cmd() != 0) {
        _internal_set_cmd(from._internal_cmd());
    }
    if (from.x() != 0) {
        _internal_set_x(from._internal_x());
    }
    if (from.y() != 0) {
        _internal_set_y(from._internal_y());
    }
}

void client_gobang_position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:client_gobang_position)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void client_gobang_position::CopyFrom(const client_gobang_position &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client_gobang_position)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool client_gobang_position::IsInitialized() const {
    return true;
}

void client_gobang_position::InternalSwap(client_gobang_position *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(client_gobang_position, y_)
            + sizeof(client_gobang_position::y_)
            - PROTOBUF_FIELD_OFFSET(client_gobang_position, cmd_)>(
            reinterpret_cast<char *>(&cmd_),
            reinterpret_cast<char *>(&other->cmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata client_gobang_position::GetMetadata() const {
    return GetMetadataStatic();
}


// ===================================================================

void server_gobang_position::InitAsDefaultInstance() {
}

class server_gobang_position::_Internal {
public:
};

server_gobang_position::server_gobang_position(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:server_gobang_position)
}

server_gobang_position::server_gobang_position(const server_gobang_position &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::memcpy(&cmd_, &from.cmd_,
             static_cast<size_t>(reinterpret_cast<char *>(&y_) -
                                 reinterpret_cast<char *>(&cmd_)) + sizeof(y_));
    // @@protoc_insertion_point(copy_constructor:server_gobang_position)
}

void server_gobang_position::SharedCtor() {
    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&y_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(y_));
}

server_gobang_position::~server_gobang_position() {
    // @@protoc_insertion_point(destructor:server_gobang_position)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void server_gobang_position::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
}

void server_gobang_position::ArenaDtor(void *object) {
    server_gobang_position *_this = reinterpret_cast< server_gobang_position * >(object);
    (void) _this;
}

void server_gobang_position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void server_gobang_position::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const server_gobang_position &server_gobang_position::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_server_gobang_position_base_2eproto.base);
    return *internal_default_instance();
}


void server_gobang_position::Clear() {
// @@protoc_insertion_point(message_clear_start:server_gobang_position)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&y_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(y_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *
server_gobang_position::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 cmd = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // int32 x = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
                    x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // int32 y = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
                    y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *server_gobang_position::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:server_gobang_position)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
    }

    // int32 x = 2;
    if (this->x() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
    }

    // int32 y = 3;
    if (this->y() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:server_gobang_position)
    return target;
}

size_t server_gobang_position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_gobang_position)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_cmd());
    }

    // int32 x = 2;
    if (this->x() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_x());
    }

    // int32 y = 3;
    if (this->y() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_y());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void server_gobang_position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_gobang_position)
            GOOGLE_DCHECK_NE(&from, this);
    const server_gobang_position *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<server_gobang_position>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_gobang_position)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:server_gobang_position)
        MergeFrom(*source);
    }
}

void server_gobang_position::MergeFrom(const server_gobang_position &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_gobang_position)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.cmd() != 0) {
        _internal_set_cmd(from._internal_cmd());
    }
    if (from.x() != 0) {
        _internal_set_x(from._internal_x());
    }
    if (from.y() != 0) {
        _internal_set_y(from._internal_y());
    }
}

void server_gobang_position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_gobang_position)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void server_gobang_position::CopyFrom(const server_gobang_position &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_gobang_position)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool server_gobang_position::IsInitialized() const {
    return true;
}

void server_gobang_position::InternalSwap(server_gobang_position *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(server_gobang_position, y_)
            + sizeof(server_gobang_position::y_)
            - PROTOBUF_FIELD_OFFSET(server_gobang_position, cmd_)>(
            reinterpret_cast<char *>(&cmd_),
            reinterpret_cast<char *>(&other->cmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata server_gobang_position::GetMetadata() const {
    return GetMetadataStatic();
}


// ===================================================================

void client_login::InitAsDefaultInstance() {
}

class client_login::_Internal {
public:
};

client_login::client_login(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:client_login)
}

client_login::client_login(const client_login &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_username().empty()) {
        username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
                      GetArena());
    }
    passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_passwd().empty()) {
        passwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_passwd(),
                    GetArena());
    }
    cmd_ = from.cmd_;
    // @@protoc_insertion_point(copy_constructor:client_login)
}

void client_login::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_client_login_base_2eproto.base);
    username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    cmd_ = 0;
}

client_login::~client_login() {
    // @@protoc_insertion_point(destructor:client_login)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void client_login::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
    username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    passwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void client_login::ArenaDtor(void *object) {
    client_login *_this = reinterpret_cast< client_login * >(object);
    (void) _this;
}

void client_login::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void client_login::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const client_login &client_login::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_client_login_base_2eproto.base);
    return *internal_default_instance();
}


void client_login::Clear() {
// @@protoc_insertion_point(message_clear_start:client_login)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    passwd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    cmd_ = 0;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *client_login::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 cmd = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // string username = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                    auto str = _internal_mutable_username();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "client_login.username"));
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // string passwd = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
                    auto str = _internal_mutable_passwd();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "client_login.passwd"));
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *client_login::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:client_login)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
    }

    // string username = 2;
    if (this->username().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "client_login.username");
        target = stream->WriteStringMaybeAliased(
                2, this->_internal_username(), target);
    }

    // string passwd = 3;
    if (this->passwd().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_passwd().data(), static_cast<int>(this->_internal_passwd().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "client_login.passwd");
        target = stream->WriteStringMaybeAliased(
                3, this->_internal_passwd(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:client_login)
    return target;
}

size_t client_login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client_login)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // string username = 2;
    if (this->username().size() > 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_username());
    }

    // string passwd = 3;
    if (this->passwd().size() > 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_passwd());
    }

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_cmd());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void client_login::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:client_login)
            GOOGLE_DCHECK_NE(&from, this);
    const client_login *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<client_login>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:client_login)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:client_login)
        MergeFrom(*source);
    }
}

void client_login::MergeFrom(const client_login &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client_login)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.username().size() > 0) {
        _internal_set_username(from._internal_username());
    }
    if (from.passwd().size() > 0) {
        _internal_set_passwd(from._internal_passwd());
    }
    if (from.cmd() != 0) {
        _internal_set_cmd(from._internal_cmd());
    }
}

void client_login::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:client_login)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void client_login::CopyFrom(const client_login &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client_login)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool client_login::IsInitialized() const {
    return true;
}

void client_login::InternalSwap(client_login *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    passwd_.Swap(&other->passwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata client_login::GetMetadata() const {
    return GetMetadataStatic();
}


// ===================================================================

void server_login::InitAsDefaultInstance() {
}

class server_login::_Internal {
public:
};

server_login::server_login(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:server_login)
}

server_login::server_login(const server_login &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_message().empty()) {
        message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
                     GetArena());
    }
    ::memcpy(&cmd_, &from.cmd_,
             static_cast<size_t>(reinterpret_cast<char *>(&issuccess_) -
                                 reinterpret_cast<char *>(&cmd_)) + sizeof(issuccess_));
    // @@protoc_insertion_point(copy_constructor:server_login)
}

void server_login::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_server_login_base_2eproto.base);
    message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&issuccess_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(issuccess_));
}

server_login::~server_login() {
    // @@protoc_insertion_point(destructor:server_login)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void server_login::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
    message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void server_login::ArenaDtor(void *object) {
    server_login *_this = reinterpret_cast< server_login * >(object);
    (void) _this;
}

void server_login::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void server_login::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const server_login &server_login::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_server_login_base_2eproto.base);
    return *internal_default_instance();
}


void server_login::Clear() {
// @@protoc_insertion_point(message_clear_start:server_login)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&issuccess_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(issuccess_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *server_login::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 cmd = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // int32 isSuccess = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
                    issuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // string message = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
                    auto str = _internal_mutable_message();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server_login.message"));
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *server_login::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:server_login)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
    }

    // int32 isSuccess = 2;
    if (this->issuccess() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_issuccess(),
                                                                                      target);
    }

    // string message = 3;
    if (this->message().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "server_login.message");
        target = stream->WriteStringMaybeAliased(
                3, this->_internal_message(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:server_login)
    return target;
}

size_t server_login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_login)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // string message = 3;
    if (this->message().size() > 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_message());
    }

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_cmd());
    }

    // int32 isSuccess = 2;
    if (this->issuccess() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_issuccess());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void server_login::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_login)
            GOOGLE_DCHECK_NE(&from, this);
    const server_login *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<server_login>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_login)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:server_login)
        MergeFrom(*source);
    }
}

void server_login::MergeFrom(const server_login &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_login)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.message().size() > 0) {
        _internal_set_message(from._internal_message());
    }
    if (from.cmd() != 0) {
        _internal_set_cmd(from._internal_cmd());
    }
    if (from.issuccess() != 0) {
        _internal_set_issuccess(from._internal_issuccess());
    }
}

void server_login::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_login)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void server_login::CopyFrom(const server_login &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_login)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool server_login::IsInitialized() const {
    return true;
}

void server_login::InternalSwap(server_login *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(server_login, issuccess_)
            + sizeof(server_login::issuccess_)
            - PROTOBUF_FIELD_OFFSET(server_login, cmd_)>(
            reinterpret_cast<char *>(&cmd_),
            reinterpret_cast<char *>(&other->cmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata server_login::GetMetadata() const {
    return GetMetadataStatic();
}


// ===================================================================

void client_register::InitAsDefaultInstance() {
}

class client_register::_Internal {
public:
};

client_register::client_register(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:client_register)
}

client_register::client_register(const client_register &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_username().empty()) {
        username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
                      GetArena());
    }
    passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_passwd().empty()) {
        passwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_passwd(),
                    GetArena());
    }
    cmd_ = from.cmd_;
    // @@protoc_insertion_point(copy_constructor:client_register)
}

void client_register::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_client_register_base_2eproto.base);
    username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    cmd_ = 0;
}

client_register::~client_register() {
    // @@protoc_insertion_point(destructor:client_register)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void client_register::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
    username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    passwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void client_register::ArenaDtor(void *object) {
    client_register *_this = reinterpret_cast< client_register * >(object);
    (void) _this;
}

void client_register::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void client_register::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const client_register &client_register::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_client_register_base_2eproto.base);
    return *internal_default_instance();
}


void client_register::Clear() {
// @@protoc_insertion_point(message_clear_start:client_register)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    passwd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    cmd_ = 0;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *client_register::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 cmd = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // string username = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                    auto str = _internal_mutable_username();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "client_register.username"));
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // string passwd = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
                    auto str = _internal_mutable_passwd();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "client_register.passwd"));
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *client_register::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:client_register)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
    }

    // string username = 2;
    if (this->username().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "client_register.username");
        target = stream->WriteStringMaybeAliased(
                2, this->_internal_username(), target);
    }

    // string passwd = 3;
    if (this->passwd().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_passwd().data(), static_cast<int>(this->_internal_passwd().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "client_register.passwd");
        target = stream->WriteStringMaybeAliased(
                3, this->_internal_passwd(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:client_register)
    return target;
}

size_t client_register::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client_register)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // string username = 2;
    if (this->username().size() > 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_username());
    }

    // string passwd = 3;
    if (this->passwd().size() > 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_passwd());
    }

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_cmd());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void client_register::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:client_register)
            GOOGLE_DCHECK_NE(&from, this);
    const client_register *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<client_register>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:client_register)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:client_register)
        MergeFrom(*source);
    }
}

void client_register::MergeFrom(const client_register &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client_register)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.username().size() > 0) {
        _internal_set_username(from._internal_username());
    }
    if (from.passwd().size() > 0) {
        _internal_set_passwd(from._internal_passwd());
    }
    if (from.cmd() != 0) {
        _internal_set_cmd(from._internal_cmd());
    }
}

void client_register::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:client_register)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void client_register::CopyFrom(const client_register &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client_register)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool client_register::IsInitialized() const {
    return true;
}

void client_register::InternalSwap(client_register *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    passwd_.Swap(&other->passwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata client_register::GetMetadata() const {
    return GetMetadataStatic();
}


// ===================================================================

void server_register::InitAsDefaultInstance() {
}

class server_register::_Internal {
public:
};

server_register::server_register(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:server_register)
}

server_register::server_register(const server_register &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_message().empty()) {
        message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
                     GetArena());
    }
    ::memcpy(&cmd_, &from.cmd_,
             static_cast<size_t>(reinterpret_cast<char *>(&issuccess_) -
                                 reinterpret_cast<char *>(&cmd_)) + sizeof(issuccess_));
    // @@protoc_insertion_point(copy_constructor:server_register)
}

void server_register::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_server_register_base_2eproto.base);
    message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&issuccess_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(issuccess_));
}

server_register::~server_register() {
    // @@protoc_insertion_point(destructor:server_register)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void server_register::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
    message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void server_register::ArenaDtor(void *object) {
    server_register *_this = reinterpret_cast< server_register * >(object);
    (void) _this;
}

void server_register::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void server_register::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const server_register &server_register::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_server_register_base_2eproto.base);
    return *internal_default_instance();
}


void server_register::Clear() {
// @@protoc_insertion_point(message_clear_start:server_register)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&issuccess_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(issuccess_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *server_register::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 cmd = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // int32 isSuccess = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
                    issuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // string message = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
                    auto str = _internal_mutable_message();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server_register.message"));
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *server_register::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:server_register)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
    }

    // int32 isSuccess = 2;
    if (this->issuccess() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_issuccess(),
                                                                                      target);
    }

    // string message = 3;
    if (this->message().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "server_register.message");
        target = stream->WriteStringMaybeAliased(
                3, this->_internal_message(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:server_register)
    return target;
}

size_t server_register::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_register)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // string message = 3;
    if (this->message().size() > 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_message());
    }

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_cmd());
    }

    // int32 isSuccess = 2;
    if (this->issuccess() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_issuccess());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void server_register::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_register)
            GOOGLE_DCHECK_NE(&from, this);
    const server_register *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<server_register>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_register)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:server_register)
        MergeFrom(*source);
    }
}

void server_register::MergeFrom(const server_register &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_register)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.message().size() > 0) {
        _internal_set_message(from._internal_message());
    }
    if (from.cmd() != 0) {
        _internal_set_cmd(from._internal_cmd());
    }
    if (from.issuccess() != 0) {
        _internal_set_issuccess(from._internal_issuccess());
    }
}

void server_register::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_register)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void server_register::CopyFrom(const server_register &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_register)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool server_register::IsInitialized() const {
    return true;
}

void server_register::InternalSwap(server_register *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(server_register, issuccess_)
            + sizeof(server_register::issuccess_)
            - PROTOBUF_FIELD_OFFSET(server_register, cmd_)>(
            reinterpret_cast<char *>(&cmd_),
            reinterpret_cast<char *>(&other->cmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata server_register::GetMetadata() const {
    return GetMetadataStatic();
}


// ===================================================================

void client_create_game::InitAsDefaultInstance() {
}

class client_create_game::_Internal {
public:
};

client_create_game::client_create_game(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:client_create_game)
}

client_create_game::client_create_game(const client_create_game &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    withusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_withusername().empty()) {
        withusername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                          from._internal_withusername(),
                          GetArena());
    }
    cmd_ = from.cmd_;
    // @@protoc_insertion_point(copy_constructor:client_create_game)
}

void client_create_game::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_client_create_game_base_2eproto.base);
    withusername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    cmd_ = 0;
}

client_create_game::~client_create_game() {
    // @@protoc_insertion_point(destructor:client_create_game)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void client_create_game::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
    withusername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void client_create_game::ArenaDtor(void *object) {
    client_create_game *_this = reinterpret_cast< client_create_game * >(object);
    (void) _this;
}

void client_create_game::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void client_create_game::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const client_create_game &client_create_game::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_client_create_game_base_2eproto.base);
    return *internal_default_instance();
}


void client_create_game::Clear() {
// @@protoc_insertion_point(message_clear_start:client_create_game)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    withusername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    cmd_ = 0;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *client_create_game::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 cmd = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // string withUsername = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                    auto str = _internal_mutable_withusername();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "client_create_game.withUsername"));
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *client_create_game::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:client_create_game)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
    }

    // string withUsername = 2;
    if (this->withusername().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_withusername().data(), static_cast<int>(this->_internal_withusername().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "client_create_game.withUsername");
        target = stream->WriteStringMaybeAliased(
                2, this->_internal_withusername(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:client_create_game)
    return target;
}

size_t client_create_game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client_create_game)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // string withUsername = 2;
    if (this->withusername().size() > 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_withusername());
    }

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_cmd());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void client_create_game::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:client_create_game)
            GOOGLE_DCHECK_NE(&from, this);
    const client_create_game *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<client_create_game>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:client_create_game)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:client_create_game)
        MergeFrom(*source);
    }
}

void client_create_game::MergeFrom(const client_create_game &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client_create_game)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.withusername().size() > 0) {
        _internal_set_withusername(from._internal_withusername());
    }
    if (from.cmd() != 0) {
        _internal_set_cmd(from._internal_cmd());
    }
}

void client_create_game::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:client_create_game)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void client_create_game::CopyFrom(const client_create_game &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client_create_game)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool client_create_game::IsInitialized() const {
    return true;
}

void client_create_game::InternalSwap(client_create_game *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    withusername_.Swap(&other->withusername_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                       GetArena());
    swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata client_create_game::GetMetadata() const {
    return GetMetadataStatic();
}


// ===================================================================

void server_online_infor::InitAsDefaultInstance() {
}

class server_online_infor::_Internal {
public:
};

server_online_infor::server_online_infor(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena),
          people_(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:server_online_infor)
}

server_online_infor::server_online_infor(const server_online_infor &from)
        : ::PROTOBUF_NAMESPACE_ID::Message(),
          people_(from.people_) {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    cmd_ = from.cmd_;
    // @@protoc_insertion_point(copy_constructor:server_online_infor)
}

void server_online_infor::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_server_online_infor_base_2eproto.base);
    cmd_ = 0;
}

server_online_infor::~server_online_infor() {
    // @@protoc_insertion_point(destructor:server_online_infor)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void server_online_infor::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
}

void server_online_infor::ArenaDtor(void *object) {
    server_online_infor *_this = reinterpret_cast< server_online_infor * >(object);
    (void) _this;
}

void server_online_infor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void server_online_infor::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const server_online_infor &server_online_infor::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_server_online_infor_base_2eproto.base);
    return *internal_default_instance();
}


void server_online_infor::Clear() {
// @@protoc_insertion_point(message_clear_start:server_online_infor)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    people_.Clear();
    cmd_ = 0;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *server_online_infor::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 cmd = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // repeated string people = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                    ptr -= 1;
                    do {
                        ptr += 1;
                        auto str = _internal_add_people();
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                        CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server_online_infor.people"));
                        CHK_(ptr);
                        if (!ctx->DataAvailable(ptr)) break;
                    } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *server_online_infor::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:server_online_infor)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
    }

    // repeated string people = 2;
    for (int i = 0, n = this->_internal_people_size(); i < n; i++) {
        const auto &s = this->_internal_people(i);
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "server_online_infor.people");
        target = stream->WriteString(2, s, target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:server_online_infor)
    return target;
}

size_t server_online_infor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_online_infor)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // repeated string people = 2;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(people_.size());
    for (int i = 0, n = people_.size(); i < n; i++) {
        total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                people_.Get(i));
    }

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_cmd());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void server_online_infor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_online_infor)
            GOOGLE_DCHECK_NE(&from, this);
    const server_online_infor *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<server_online_infor>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_online_infor)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:server_online_infor)
        MergeFrom(*source);
    }
}

void server_online_infor::MergeFrom(const server_online_infor &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_online_infor)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    people_.MergeFrom(from.people_);
    if (from.cmd() != 0) {
        _internal_set_cmd(from._internal_cmd());
    }
}

void server_online_infor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_online_infor)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void server_online_infor::CopyFrom(const server_online_infor &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_online_infor)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool server_online_infor::IsInitialized() const {
    return true;
}

void server_online_infor::InternalSwap(server_online_infor *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    people_.InternalSwap(&other->people_);
    swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata server_online_infor::GetMetadata() const {
    return GetMetadataStatic();
}


// ===================================================================

void server_game_invite::InitAsDefaultInstance() {
}

class server_game_invite::_Internal {
public:
};

server_game_invite::server_game_invite(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:server_game_invite)
}

server_game_invite::server_game_invite(const server_game_invite &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    people_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_people().empty()) {
        people_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_people(),
                    GetArena());
    }
    cmd_ = from.cmd_;
    // @@protoc_insertion_point(copy_constructor:server_game_invite)
}

void server_game_invite::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_server_game_invite_base_2eproto.base);
    people_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    cmd_ = 0;
}

server_game_invite::~server_game_invite() {
    // @@protoc_insertion_point(destructor:server_game_invite)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void server_game_invite::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
    people_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void server_game_invite::ArenaDtor(void *object) {
    server_game_invite *_this = reinterpret_cast< server_game_invite * >(object);
    (void) _this;
}

void server_game_invite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void server_game_invite::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const server_game_invite &server_game_invite::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_server_game_invite_base_2eproto.base);
    return *internal_default_instance();
}


void server_game_invite::Clear() {
// @@protoc_insertion_point(message_clear_start:server_game_invite)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    people_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    cmd_ = 0;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *server_game_invite::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 cmd = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // string people = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                    auto str = _internal_mutable_people();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server_game_invite.people"));
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *server_game_invite::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:server_game_invite)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
    }

    // string people = 2;
    if (this->people().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_people().data(), static_cast<int>(this->_internal_people().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "server_game_invite.people");
        target = stream->WriteStringMaybeAliased(
                2, this->_internal_people(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:server_game_invite)
    return target;
}

size_t server_game_invite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_game_invite)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // string people = 2;
    if (this->people().size() > 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_people());
    }

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_cmd());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void server_game_invite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_game_invite)
            GOOGLE_DCHECK_NE(&from, this);
    const server_game_invite *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<server_game_invite>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_game_invite)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:server_game_invite)
        MergeFrom(*source);
    }
}

void server_game_invite::MergeFrom(const server_game_invite &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_game_invite)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.people().size() > 0) {
        _internal_set_people(from._internal_people());
    }
    if (from.cmd() != 0) {
        _internal_set_cmd(from._internal_cmd());
    }
}

void server_game_invite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_game_invite)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void server_game_invite::CopyFrom(const server_game_invite &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_game_invite)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool server_game_invite::IsInitialized() const {
    return true;
}

void server_game_invite::InternalSwap(server_game_invite *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    people_.Swap(&other->people_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata server_game_invite::GetMetadata() const {
    return GetMetadataStatic();
}


// ===================================================================

void client_game_invite::InitAsDefaultInstance() {
}

class client_game_invite::_Internal {
public:
};

client_game_invite::client_game_invite(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:client_game_invite)
}

client_game_invite::client_game_invite(const client_game_invite &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::memcpy(&cmd_, &from.cmd_,
             static_cast<size_t>(reinterpret_cast<char *>(&code_) -
                                 reinterpret_cast<char *>(&cmd_)) + sizeof(code_));
    // @@protoc_insertion_point(copy_constructor:client_game_invite)
}

void client_game_invite::SharedCtor() {
    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&code_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(code_));
}

client_game_invite::~client_game_invite() {
    // @@protoc_insertion_point(destructor:client_game_invite)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void client_game_invite::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
}

void client_game_invite::ArenaDtor(void *object) {
    client_game_invite *_this = reinterpret_cast< client_game_invite * >(object);
    (void) _this;
}

void client_game_invite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void client_game_invite::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const client_game_invite &client_game_invite::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_client_game_invite_base_2eproto.base);
    return *internal_default_instance();
}


void client_game_invite::Clear() {
// @@protoc_insertion_point(message_clear_start:client_game_invite)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&code_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(code_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *client_game_invite::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 cmd = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // int32 code = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
                    code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *client_game_invite::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:client_game_invite)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
    }

    // int32 code = 2;
    if (this->code() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(),
                                                                                      target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:client_game_invite)
    return target;
}

size_t client_game_invite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client_game_invite)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_cmd());
    }

    // int32 code = 2;
    if (this->code() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_code());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void client_game_invite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:client_game_invite)
            GOOGLE_DCHECK_NE(&from, this);
    const client_game_invite *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<client_game_invite>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:client_game_invite)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:client_game_invite)
        MergeFrom(*source);
    }
}

void client_game_invite::MergeFrom(const client_game_invite &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client_game_invite)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.cmd() != 0) {
        _internal_set_cmd(from._internal_cmd());
    }
    if (from.code() != 0) {
        _internal_set_code(from._internal_code());
    }
}

void client_game_invite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:client_game_invite)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void client_game_invite::CopyFrom(const client_game_invite &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client_game_invite)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool client_game_invite::IsInitialized() const {
    return true;
}

void client_game_invite::InternalSwap(client_game_invite *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(client_game_invite, code_)
            + sizeof(client_game_invite::code_)
            - PROTOBUF_FIELD_OFFSET(client_game_invite, cmd_)>(
            reinterpret_cast<char *>(&cmd_),
            reinterpret_cast<char *>(&other->cmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata client_game_invite::GetMetadata() const {
    return GetMetadataStatic();
}


// ===================================================================

void server_game_isInvite::InitAsDefaultInstance() {
}

class server_game_isInvite::_Internal {
public:
};

server_game_isInvite::server_game_isInvite(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:server_game_isInvite)
}

server_game_isInvite::server_game_isInvite(const server_game_isInvite &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::memcpy(&cmd_, &from.cmd_,
             static_cast<size_t>(reinterpret_cast<char *>(&code_) -
                                 reinterpret_cast<char *>(&cmd_)) + sizeof(code_));
    // @@protoc_insertion_point(copy_constructor:server_game_isInvite)
}

void server_game_isInvite::SharedCtor() {
    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&code_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(code_));
}

server_game_isInvite::~server_game_isInvite() {
    // @@protoc_insertion_point(destructor:server_game_isInvite)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void server_game_isInvite::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
}

void server_game_isInvite::ArenaDtor(void *object) {
    server_game_isInvite *_this = reinterpret_cast< server_game_isInvite * >(object);
    (void) _this;
}

void server_game_isInvite::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void server_game_isInvite::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const server_game_isInvite &server_game_isInvite::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_server_game_isInvite_base_2eproto.base);
    return *internal_default_instance();
}


void server_game_isInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:server_game_isInvite)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&code_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(code_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *
server_game_isInvite::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 cmd = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // int32 code = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
                    code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *server_game_isInvite::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:server_game_isInvite)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
    }

    // int32 code = 2;
    if (this->code() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(),
                                                                                      target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:server_game_isInvite)
    return target;
}

size_t server_game_isInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_game_isInvite)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_cmd());
    }

    // int32 code = 2;
    if (this->code() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_code());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void server_game_isInvite::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_game_isInvite)
            GOOGLE_DCHECK_NE(&from, this);
    const server_game_isInvite *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<server_game_isInvite>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_game_isInvite)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:server_game_isInvite)
        MergeFrom(*source);
    }
}

void server_game_isInvite::MergeFrom(const server_game_isInvite &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_game_isInvite)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.cmd() != 0) {
        _internal_set_cmd(from._internal_cmd());
    }
    if (from.code() != 0) {
        _internal_set_code(from._internal_code());
    }
}

void server_game_isInvite::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_game_isInvite)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void server_game_isInvite::CopyFrom(const server_game_isInvite &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_game_isInvite)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool server_game_isInvite::IsInitialized() const {
    return true;
}

void server_game_isInvite::InternalSwap(server_game_isInvite *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(server_game_isInvite, code_)
            + sizeof(server_game_isInvite::code_)
            - PROTOBUF_FIELD_OFFSET(server_game_isInvite, cmd_)>(
            reinterpret_cast<char *>(&cmd_),
            reinterpret_cast<char *>(&other->cmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata server_game_isInvite::GetMetadata() const {
    return GetMetadataStatic();
}


// ===================================================================

void test::InitAsDefaultInstance() {
}

class test::_Internal {
public:
};

test::test(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:test)
}

test::test(const test &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    inform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_inform().empty()) {
        inform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_inform(),
                    GetArena());
    }
    cmd_ = from.cmd_;
    // @@protoc_insertion_point(copy_constructor:test)
}

void test::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_test_base_2eproto.base);
    inform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    cmd_ = 0;
}

test::~test() {
    // @@protoc_insertion_point(destructor:test)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void test::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
    inform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void test::ArenaDtor(void *object) {
    test *_this = reinterpret_cast< test * >(object);
    (void) _this;
}

void test::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void test::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const test &test::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_test_base_2eproto.base);
    return *internal_default_instance();
}


void test::Clear() {
// @@protoc_insertion_point(message_clear_start:test)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    inform_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    cmd_ = 0;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *test::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 cmd = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // string inform = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                    auto str = _internal_mutable_inform();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "test.inform"));
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *test::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:test)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
    }

    // string inform = 2;
    if (this->inform().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_inform().data(), static_cast<int>(this->_internal_inform().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "test.inform");
        target = stream->WriteStringMaybeAliased(
                2, this->_internal_inform(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:test)
    return target;
}

size_t test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // string inform = 2;
    if (this->inform().size() > 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_inform());
    }

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_cmd());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void test::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:test)
            GOOGLE_DCHECK_NE(&from, this);
    const test *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<test>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:test)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:test)
        MergeFrom(*source);
    }
}

void test::MergeFrom(const test &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.inform().size() > 0) {
        _internal_set_inform(from._internal_inform());
    }
    if (from.cmd() != 0) {
        _internal_set_cmd(from._internal_cmd());
    }
}

void test::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:test)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void test::CopyFrom(const test &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool test::IsInitialized() const {
    return true;
}

void test::InternalSwap(test *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    inform_.Swap(&other->inform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata test::GetMetadata() const {
    return GetMetadataStatic();
}


// ===================================================================

void chatMessage::InitAsDefaultInstance() {
}

class chatMessage::_Internal {
public:
};

chatMessage::chatMessage(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:chatMessage)
}

chatMessage::chatMessage(const chatMessage &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_data().empty()) {
        data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
                  GetArena());
    }
    time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_time().empty()) {
        time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_time(),
                  GetArena());
    }
    ::memcpy(&cmd_, &from.cmd_,
             static_cast<size_t>(reinterpret_cast<char *>(&type_) -
                                 reinterpret_cast<char *>(&cmd_)) + sizeof(type_));
    // @@protoc_insertion_point(copy_constructor:chatMessage)
}

void chatMessage::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_chatMessage_base_2eproto.base);
    data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&type_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(type_));
}

chatMessage::~chatMessage() {
    // @@protoc_insertion_point(destructor:chatMessage)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void chatMessage::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
    data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void chatMessage::ArenaDtor(void *object) {
    chatMessage *_this = reinterpret_cast< chatMessage * >(object);
    (void) _this;
}

void chatMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void chatMessage::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const chatMessage &chatMessage::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_chatMessage_base_2eproto.base);
    return *internal_default_instance();
}


void chatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chatMessage)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&type_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(type_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *chatMessage::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 cmd = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // string data = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                    auto str = _internal_mutable_data();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chatMessage.data"));
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // string time = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
                    auto str = _internal_mutable_time();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "chatMessage.time"));
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // int32 type = 4;
            case 4:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
                    type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *chatMessage::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:chatMessage)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
    }

    // string data = 2;
    if (this->data().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "chatMessage.data");
        target = stream->WriteStringMaybeAliased(
                2, this->_internal_data(), target);
    }

    // string time = 3;
    if (this->time().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "chatMessage.time");
        target = stream->WriteStringMaybeAliased(
                3, this->_internal_time(), target);
    }

    // int32 type = 4;
    if (this->type() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_type(),
                                                                                      target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:chatMessage)
    return target;
}

size_t chatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chatMessage)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // string data = 2;
    if (this->data().size() > 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_data());
    }

    // string time = 3;
    if (this->time().size() > 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_time());
    }

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_cmd());
    }

    // int32 type = 4;
    if (this->type() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_type());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void chatMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:chatMessage)
            GOOGLE_DCHECK_NE(&from, this);
    const chatMessage *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<chatMessage>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:chatMessage)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:chatMessage)
        MergeFrom(*source);
    }
}

void chatMessage::MergeFrom(const chatMessage &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chatMessage)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.data().size() > 0) {
        _internal_set_data(from._internal_data());
    }
    if (from.time().size() > 0) {
        _internal_set_time(from._internal_time());
    }
    if (from.cmd() != 0) {
        _internal_set_cmd(from._internal_cmd());
    }
    if (from.type() != 0) {
        _internal_set_type(from._internal_type());
    }
}

void chatMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:chatMessage)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void chatMessage::CopyFrom(const chatMessage &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chatMessage)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool chatMessage::IsInitialized() const {
    return true;
}

void chatMessage::InternalSwap(chatMessage *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(chatMessage, type_)
            + sizeof(chatMessage::type_)
            - PROTOBUF_FIELD_OFFSET(chatMessage, cmd_)>(
            reinterpret_cast<char *>(&cmd_),
            reinterpret_cast<char *>(&other->cmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata chatMessage::GetMetadata() const {
    return GetMetadataStatic();
}


// ===================================================================

void server_user_infor::InitAsDefaultInstance() {
}

class server_user_infor::_Internal {
public:
};

server_user_infor::server_user_infor(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:server_user_infor)
}

server_user_infor::server_user_infor(const server_user_infor &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_name().empty()) {
        name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
                  GetArena());
    }
    avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_avatar().empty()) {
        avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_avatar(),
                    GetArena());
    }
    ::memcpy(&cmd_, &from.cmd_,
             static_cast<size_t>(reinterpret_cast<char *>(&gamecurrency_) -
                                 reinterpret_cast<char *>(&cmd_)) + sizeof(gamecurrency_));
    // @@protoc_insertion_point(copy_constructor:server_user_infor)
}

void server_user_infor::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_server_user_infor_base_2eproto.base);
    name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&gamecurrency_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(gamecurrency_));
}

server_user_infor::~server_user_infor() {
    // @@protoc_insertion_point(destructor:server_user_infor)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void server_user_infor::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
    name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void server_user_infor::ArenaDtor(void *object) {
    server_user_infor *_this = reinterpret_cast< server_user_infor * >(object);
    (void) _this;
}

void server_user_infor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void server_user_infor::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const server_user_infor &server_user_infor::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_server_user_infor_base_2eproto.base);
    return *internal_default_instance();
}


void server_user_infor::Clear() {
// @@protoc_insertion_point(message_clear_start:server_user_infor)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    avatar_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&gamecurrency_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(gamecurrency_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *server_user_infor::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 cmd = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // string name = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                    auto str = _internal_mutable_name();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server_user_infor.name"));
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // int32 integral = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
                    integral_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // int32 level = 4;
            case 4:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
                    level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // int32 numsGame = 5;
            case 5:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
                    numsgame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // int32 win = 6;
            case 6:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
                    win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // int32 lose = 7;
            case 7:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
                    lose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // int32 draw = 8;
            case 8:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
                    draw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // int32 gameCurrency = 9;
            case 9:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
                    gamecurrency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // bytes avatar = 10;
            case 10:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
                    auto str = _internal_mutable_avatar();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *server_user_infor::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:server_user_infor)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
    }

    // string name = 2;
    if (this->name().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "server_user_infor.name");
        target = stream->WriteStringMaybeAliased(
                2, this->_internal_name(), target);
    }

    // int32 integral = 3;
    if (this->integral() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_integral(),
                                                                                      target);
    }

    // int32 level = 4;
    if (this->level() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_level(),
                                                                                      target);
    }

    // int32 numsGame = 5;
    if (this->numsgame() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_numsgame(),
                                                                                      target);
    }

    // int32 win = 6;
    if (this->win() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_win(), target);
    }

    // int32 lose = 7;
    if (this->lose() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_lose(),
                                                                                      target);
    }

    // int32 draw = 8;
    if (this->draw() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_draw(),
                                                                                      target);
    }

    // int32 gameCurrency = 9;
    if (this->gamecurrency() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_gamecurrency(),
                                                                                      target);
    }

    // bytes avatar = 10;
    if (this->avatar().size() > 0) {
        target = stream->WriteBytesMaybeAliased(
                10, this->_internal_avatar(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:server_user_infor)
    return target;
}

size_t server_user_infor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_user_infor)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // string name = 2;
    if (this->name().size() > 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_name());
    }

    // bytes avatar = 10;
    if (this->avatar().size() > 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                              this->_internal_avatar());
    }

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_cmd());
    }

    // int32 integral = 3;
    if (this->integral() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_integral());
    }

    // int32 level = 4;
    if (this->level() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_level());
    }

    // int32 numsGame = 5;
    if (this->numsgame() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_numsgame());
    }

    // int32 win = 6;
    if (this->win() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_win());
    }

    // int32 lose = 7;
    if (this->lose() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_lose());
    }

    // int32 draw = 8;
    if (this->draw() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_draw());
    }

    // int32 gameCurrency = 9;
    if (this->gamecurrency() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_gamecurrency());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void server_user_infor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_user_infor)
            GOOGLE_DCHECK_NE(&from, this);
    const server_user_infor *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<server_user_infor>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_user_infor)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:server_user_infor)
        MergeFrom(*source);
    }
}

void server_user_infor::MergeFrom(const server_user_infor &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_user_infor)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.name().size() > 0) {
        _internal_set_name(from._internal_name());
    }
    if (from.avatar().size() > 0) {
        _internal_set_avatar(from._internal_avatar());
    }
    if (from.cmd() != 0) {
        _internal_set_cmd(from._internal_cmd());
    }
    if (from.integral() != 0) {
        _internal_set_integral(from._internal_integral());
    }
    if (from.level() != 0) {
        _internal_set_level(from._internal_level());
    }
    if (from.numsgame() != 0) {
        _internal_set_numsgame(from._internal_numsgame());
    }
    if (from.win() != 0) {
        _internal_set_win(from._internal_win());
    }
    if (from.lose() != 0) {
        _internal_set_lose(from._internal_lose());
    }
    if (from.draw() != 0) {
        _internal_set_draw(from._internal_draw());
    }
    if (from.gamecurrency() != 0) {
        _internal_set_gamecurrency(from._internal_gamecurrency());
    }
}

void server_user_infor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_user_infor)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void server_user_infor::CopyFrom(const server_user_infor &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_user_infor)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool server_user_infor::IsInitialized() const {
    return true;
}

void server_user_infor::InternalSwap(server_user_infor *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    avatar_.Swap(&other->avatar_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(server_user_infor, gamecurrency_)
            + sizeof(server_user_infor::gamecurrency_)
            - PROTOBUF_FIELD_OFFSET(server_user_infor, cmd_)>(
            reinterpret_cast<char *>(&cmd_),
            reinterpret_cast<char *>(&other->cmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata server_user_infor::GetMetadata() const {
    return GetMetadataStatic();
}


// ===================================================================

void whoWin::InitAsDefaultInstance() {
}

class whoWin::_Internal {
public:
};

whoWin::whoWin(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:whoWin)
}

whoWin::whoWin(const whoWin &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    win_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_win().empty()) {
        win_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_win(),
                 GetArena());
    }
    ::memcpy(&cmd_, &from.cmd_,
             static_cast<size_t>(reinterpret_cast<char *>(&code_) -
                                 reinterpret_cast<char *>(&cmd_)) + sizeof(code_));
    // @@protoc_insertion_point(copy_constructor:whoWin)
}

void whoWin::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_whoWin_base_2eproto.base);
    win_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&code_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(code_));
}

whoWin::~whoWin() {
    // @@protoc_insertion_point(destructor:whoWin)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void whoWin::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
    win_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void whoWin::ArenaDtor(void *object) {
    whoWin *_this = reinterpret_cast< whoWin * >(object);
    (void) _this;
}

void whoWin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void whoWin::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const whoWin &whoWin::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_whoWin_base_2eproto.base);
    return *internal_default_instance();
}


void whoWin::Clear() {
// @@protoc_insertion_point(message_clear_start:whoWin)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    win_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&code_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(code_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *whoWin::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 cmd = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // int32 code = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
                    code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // string win = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
                    auto str = _internal_mutable_win();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "whoWin.win"));
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *whoWin::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:whoWin)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
    }

    // int32 code = 2;
    if (this->code() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_code(),
                                                                                      target);
    }

    // string win = 3;
    if (this->win().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_win().data(), static_cast<int>(this->_internal_win().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "whoWin.win");
        target = stream->WriteStringMaybeAliased(
                3, this->_internal_win(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:whoWin)
    return target;
}

size_t whoWin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:whoWin)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // string win = 3;
    if (this->win().size() > 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_win());
    }

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_cmd());
    }

    // int32 code = 2;
    if (this->code() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_code());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void whoWin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:whoWin)
            GOOGLE_DCHECK_NE(&from, this);
    const whoWin *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<whoWin>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:whoWin)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:whoWin)
        MergeFrom(*source);
    }
}

void whoWin::MergeFrom(const whoWin &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:whoWin)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.win().size() > 0) {
        _internal_set_win(from._internal_win());
    }
    if (from.cmd() != 0) {
        _internal_set_cmd(from._internal_cmd());
    }
    if (from.code() != 0) {
        _internal_set_code(from._internal_code());
    }
}

void whoWin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:whoWin)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void whoWin::CopyFrom(const whoWin &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:whoWin)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool whoWin::IsInitialized() const {
    return true;
}

void whoWin::InternalSwap(whoWin *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    win_.Swap(&other->win_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(whoWin, code_)
            + sizeof(whoWin::code_)
            - PROTOBUF_FIELD_OFFSET(whoWin, cmd_)>(
            reinterpret_cast<char *>(&cmd_),
            reinterpret_cast<char *>(&other->cmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata whoWin::GetMetadata() const {
    return GetMetadataStatic();
}


// ===================================================================

void withDraw::InitAsDefaultInstance() {
}

class withDraw::_Internal {
public:
};

withDraw::withDraw(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:withDraw)
}

withDraw::withDraw(const withDraw &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::memcpy(&cmd_, &from.cmd_,
             static_cast<size_t>(reinterpret_cast<char *>(&nums_) -
                                 reinterpret_cast<char *>(&cmd_)) + sizeof(nums_));
    // @@protoc_insertion_point(copy_constructor:withDraw)
}

void withDraw::SharedCtor() {
    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&nums_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(nums_));
}

withDraw::~withDraw() {
    // @@protoc_insertion_point(destructor:withDraw)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void withDraw::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
}

void withDraw::ArenaDtor(void *object) {
    withDraw *_this = reinterpret_cast< withDraw * >(object);
    (void) _this;
}

void withDraw::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void withDraw::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const withDraw &withDraw::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_withDraw_base_2eproto.base);
    return *internal_default_instance();
}


void withDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:withDraw)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&nums_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(nums_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *withDraw::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 cmd = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // int32 nums = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
                    nums_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *withDraw::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:withDraw)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
    }

    // int32 nums = 2;
    if (this->nums() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nums(),
                                                                                      target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:withDraw)
    return target;
}

size_t withDraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:withDraw)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_cmd());
    }

    // int32 nums = 2;
    if (this->nums() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_nums());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void withDraw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:withDraw)
            GOOGLE_DCHECK_NE(&from, this);
    const withDraw *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<withDraw>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:withDraw)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:withDraw)
        MergeFrom(*source);
    }
}

void withDraw::MergeFrom(const withDraw &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:withDraw)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.cmd() != 0) {
        _internal_set_cmd(from._internal_cmd());
    }
    if (from.nums() != 0) {
        _internal_set_nums(from._internal_nums());
    }
}

void withDraw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:withDraw)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void withDraw::CopyFrom(const withDraw &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:withDraw)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool withDraw::IsInitialized() const {
    return true;
}

void withDraw::InternalSwap(withDraw *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(withDraw, nums_)
            + sizeof(withDraw::nums_)
            - PROTOBUF_FIELD_OFFSET(withDraw, cmd_)>(
            reinterpret_cast<char *>(&cmd_),
            reinterpret_cast<char *>(&other->cmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata withDraw::GetMetadata() const {
    return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
        template<>
        PROTOBUF_NOINLINE ::cmd *Arena::CreateMaybeMessage<::cmd>(Arena *arena) {
            return Arena::CreateMessageInternal<::cmd>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::client_gobang_position *Arena::CreateMaybeMessage<::client_gobang_position>(Arena *arena) {
            return Arena::CreateMessageInternal<::client_gobang_position>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::server_gobang_position *Arena::CreateMaybeMessage<::server_gobang_position>(Arena *arena) {
            return Arena::CreateMessageInternal<::server_gobang_position>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::client_login *Arena::CreateMaybeMessage<::client_login>(Arena *arena) {
            return Arena::CreateMessageInternal<::client_login>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::server_login *Arena::CreateMaybeMessage<::server_login>(Arena *arena) {
            return Arena::CreateMessageInternal<::server_login>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::client_register *Arena::CreateMaybeMessage<::client_register>(Arena *arena) {
            return Arena::CreateMessageInternal<::client_register>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::server_register *Arena::CreateMaybeMessage<::server_register>(Arena *arena) {
            return Arena::CreateMessageInternal<::server_register>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::client_create_game *Arena::CreateMaybeMessage<::client_create_game>(Arena *arena) {
            return Arena::CreateMessageInternal<::client_create_game>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::server_online_infor *Arena::CreateMaybeMessage<::server_online_infor>(Arena *arena) {
            return Arena::CreateMessageInternal<::server_online_infor>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::server_game_invite *Arena::CreateMaybeMessage<::server_game_invite>(Arena *arena) {
            return Arena::CreateMessageInternal<::server_game_invite>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::client_game_invite *Arena::CreateMaybeMessage<::client_game_invite>(Arena *arena) {
            return Arena::CreateMessageInternal<::client_game_invite>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::server_game_isInvite *Arena::CreateMaybeMessage<::server_game_isInvite>(Arena *arena) {
            return Arena::CreateMessageInternal<::server_game_isInvite>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::test *Arena::CreateMaybeMessage<::test>(Arena *arena) {
            return Arena::CreateMessageInternal<::test>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::chatMessage *Arena::CreateMaybeMessage<::chatMessage>(Arena *arena) {
            return Arena::CreateMessageInternal<::chatMessage>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::server_user_infor *Arena::CreateMaybeMessage<::server_user_infor>(Arena *arena) {
            return Arena::CreateMessageInternal<::server_user_infor>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::whoWin *Arena::CreateMaybeMessage<::whoWin>(Arena *arena) {
            return Arena::CreateMessageInternal<::whoWin>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::withDraw *Arena::CreateMaybeMessage<::withDraw>(Arena *arena) {
            return Arena::CreateMessageInternal<::withDraw>(arena);
        }
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
