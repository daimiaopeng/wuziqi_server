// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#include "base.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class cmdDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<cmd> _instance;
} _cmd_default_instance_;

class client_gobang_positionDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<client_gobang_position> _instance;
} _client_gobang_position_default_instance_;

class server_gobang_positionDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<server_gobang_position> _instance;
} _server_gobang_position_default_instance_;

class client_loginDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<client_login> _instance;
} _client_login_default_instance_;

class server_loginDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<server_login> _instance;
} _server_login_default_instance_;

class client_registerDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<client_register> _instance;
} _client_register_default_instance_;

class server_registerDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<server_register> _instance;
} _server_register_default_instance_;

class testDefaultTypeInternal {
public:
    ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<test> _instance;
} _test_default_instance_;

static void InitDefaultsscc_info_client_gobang_position_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_client_gobang_position_default_instance_;
        new(ptr) ::client_gobang_position();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::client_gobang_position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_client_gobang_position_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_client_gobang_position_base_2eproto},
         {}};

static void InitDefaultsscc_info_client_login_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_client_login_default_instance_;
        new(ptr) ::client_login();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::client_login::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_client_login_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_client_login_base_2eproto},
         {}};

static void InitDefaultsscc_info_client_register_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_client_register_default_instance_;
        new(ptr) ::client_register();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::client_register::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_client_register_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_client_register_base_2eproto},
         {}};

static void InitDefaultsscc_info_cmd_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_cmd_default_instance_;
        new(ptr) ::cmd();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::cmd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_cmd_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_cmd_base_2eproto},
         {}};

static void InitDefaultsscc_info_server_gobang_position_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_server_gobang_position_default_instance_;
        new(ptr) ::server_gobang_position();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::server_gobang_position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_server_gobang_position_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_server_gobang_position_base_2eproto},
         {}};

static void InitDefaultsscc_info_server_login_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_server_login_default_instance_;
        new(ptr) ::server_login();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::server_login::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_server_login_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_server_login_base_2eproto},
         {}};

static void InitDefaultsscc_info_server_register_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_server_register_default_instance_;
        new(ptr) ::server_register();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::server_register::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_server_register_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_server_register_base_2eproto},
         {}};

static void InitDefaultsscc_info_test_base_2eproto() {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void *ptr = &::_test_default_instance_;
        new(ptr) ::test();
        ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
    }
    ::test::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_test_base_2eproto =
        {{ATOMIC_VAR_INIT(
                  ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_test_base_2eproto},
         {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_base_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const **file_level_enum_descriptors_base_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const **file_level_service_descriptors_base_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_base_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::cmd, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::cmd, c_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::client_gobang_position, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::client_gobang_position, cmd_),
        PROTOBUF_FIELD_OFFSET(::client_gobang_position, x_),
        PROTOBUF_FIELD_OFFSET(::client_gobang_position, y_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::server_gobang_position, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::server_gobang_position, cmd_),
        PROTOBUF_FIELD_OFFSET(::server_gobang_position, x_),
        PROTOBUF_FIELD_OFFSET(::server_gobang_position, y_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::client_login, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::client_login, cmd_),
        PROTOBUF_FIELD_OFFSET(::client_login, username_),
        PROTOBUF_FIELD_OFFSET(::client_login, passwd_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::server_login, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::server_login, cmd_),
        PROTOBUF_FIELD_OFFSET(::server_login, token_),
        PROTOBUF_FIELD_OFFSET(::server_login, message_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::client_register, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::client_register, cmd_),
        PROTOBUF_FIELD_OFFSET(::client_register, username_),
        PROTOBUF_FIELD_OFFSET(::client_register, passwd_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::server_register, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::server_register, cmd_),
        PROTOBUF_FIELD_OFFSET(::server_register, issuccess_),
        PROTOBUF_FIELD_OFFSET(::server_register, message_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::test, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        PROTOBUF_FIELD_OFFSET(::test, cmd_),
        PROTOBUF_FIELD_OFFSET(::test, inform_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0,  -1, sizeof(::cmd)},
        {6,  -1, sizeof(::client_gobang_position)},
        {14, -1, sizeof(::server_gobang_position)},
        {22, -1, sizeof(::client_login)},
        {30, -1, sizeof(::server_login)},
        {38, -1, sizeof(::client_register)},
        {46, -1, sizeof(::server_register)},
        {54, -1, sizeof(::test)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const *const file_default_instances[] = {
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_cmd_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_client_gobang_position_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_server_gobang_position_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_client_login_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_server_login_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_client_register_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_server_register_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(&::_test_default_instance_),
};

const char descriptor_table_protodef_base_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
        "\n\nbase.proto\"\020\n\003cmd\022\t\n\001c\030\001 \001(\005\";\n\026client"
        "_gobang_position\022\013\n\003cmd\030\001 \001(\005\022\t\n\001x\030\002 \001(\005"
        "\022\t\n\001y\030\003 \001(\005\";\n\026server_gobang_position\022\013\n"
        "\003cmd\030\001 \001(\005\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\"=\n\014clie"
        "nt_login\022\013\n\003cmd\030\001 \001(\005\022\020\n\010username\030\002 \001(\t\022"
        "\016\n\006passwd\030\003 \001(\t\";\n\014server_login\022\013\n\003cmd\030\001"
        " \001(\005\022\r\n\005token\030\002 \001(\t\022\017\n\007message\030\003 \001(\t\"@\n\017"
        "client_register\022\013\n\003cmd\030\001 \001(\005\022\020\n\010username"
        "\030\002 \001(\t\022\016\n\006passwd\030\003 \001(\t\"B\n\017server_registe"
        "r\022\013\n\003cmd\030\001 \001(\005\022\021\n\tisSuccess\030\002 \001(\005\022\017\n\007mes"
        "sage\030\003 \001(\t\"#\n\004test\022\013\n\003cmd\030\001 \001(\005\022\016\n\006infor"
        "m\030\002 \001(\tb\006proto3";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable *const descriptor_table_base_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase *const descriptor_table_base_2eproto_sccs[8] = {
        &scc_info_client_gobang_position_base_2eproto.base,
        &scc_info_client_login_base_2eproto.base,
        &scc_info_client_register_base_2eproto.base,
        &scc_info_cmd_base_2eproto.base,
        &scc_info_server_gobang_position_base_2eproto.base,
        &scc_info_server_login_base_2eproto.base,
        &scc_info_server_register_base_2eproto.base,
        &scc_info_test_base_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_base_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_2eproto = {
        false, false, descriptor_table_protodef_base_2eproto, "base.proto", 455,
        &descriptor_table_base_2eproto_once, descriptor_table_base_2eproto_sccs, descriptor_table_base_2eproto_deps, 8,
        0,
        schemas, file_default_instances, TableStruct_base_2eproto::offsets,
        file_level_metadata_base_2eproto, 8, file_level_enum_descriptors_base_2eproto,
        file_level_service_descriptors_base_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_base_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(
        &descriptor_table_base_2eproto)), true);

// ===================================================================

void cmd::InitAsDefaultInstance() {
}

class cmd::_Internal {
public:
};

cmd::cmd(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:cmd)
}

cmd::cmd(const cmd &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    c_ = from.c_;
    // @@protoc_insertion_point(copy_constructor:cmd)
}

void cmd::SharedCtor() {
    c_ = 0;
}

cmd::~cmd() {
    // @@protoc_insertion_point(destructor:cmd)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void cmd::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
}

void cmd::ArenaDtor(void *object) {
    cmd *_this = reinterpret_cast< cmd * >(object);
    (void) _this;
}

void cmd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void cmd::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const cmd &cmd::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_cmd_base_2eproto.base);
    return *internal_default_instance();
}


void cmd::Clear() {
// @@protoc_insertion_point(message_clear_start:cmd)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    c_ = 0;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *cmd::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 c = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *cmd::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:cmd)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 c = 1;
    if (this->c() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_c(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:cmd)
    return target;
}

size_t cmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cmd)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // int32 c = 1;
    if (this->c() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_c());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void cmd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:cmd)
            GOOGLE_DCHECK_NE(&from, this);
    const cmd *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<cmd>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:cmd)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:cmd)
        MergeFrom(*source);
    }
}

void cmd::MergeFrom(const cmd &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cmd)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.c() != 0) {
        _internal_set_c(from._internal_c());
    }
}

void cmd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:cmd)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void cmd::CopyFrom(const cmd &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cmd)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool cmd::IsInitialized() const {
    return true;
}

void cmd::InternalSwap(cmd *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    swap(c_, other->c_);
}

::PROTOBUF_NAMESPACE_ID::Metadata cmd::GetMetadata() const {
    return GetMetadataStatic();
}


// ===================================================================

void client_gobang_position::InitAsDefaultInstance() {
}

class client_gobang_position::_Internal {
public:
};

client_gobang_position::client_gobang_position(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:client_gobang_position)
}

client_gobang_position::client_gobang_position(const client_gobang_position &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::memcpy(&cmd_, &from.cmd_,
             static_cast<size_t>(reinterpret_cast<char *>(&y_) -
                                 reinterpret_cast<char *>(&cmd_)) + sizeof(y_));
    // @@protoc_insertion_point(copy_constructor:client_gobang_position)
}

void client_gobang_position::SharedCtor() {
    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&y_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(y_));
}

client_gobang_position::~client_gobang_position() {
    // @@protoc_insertion_point(destructor:client_gobang_position)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void client_gobang_position::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
}

void client_gobang_position::ArenaDtor(void *object) {
    client_gobang_position *_this = reinterpret_cast< client_gobang_position * >(object);
    (void) _this;
}

void client_gobang_position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void client_gobang_position::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const client_gobang_position &client_gobang_position::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_client_gobang_position_base_2eproto.base);
    return *internal_default_instance();
}


void client_gobang_position::Clear() {
// @@protoc_insertion_point(message_clear_start:client_gobang_position)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&y_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(y_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *
client_gobang_position::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 cmd = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // int32 x = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
                    x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // int32 y = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
                    y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *client_gobang_position::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:client_gobang_position)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
    }

    // int32 x = 2;
    if (this->x() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
    }

    // int32 y = 3;
    if (this->y() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:client_gobang_position)
    return target;
}

size_t client_gobang_position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client_gobang_position)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_cmd());
    }

    // int32 x = 2;
    if (this->x() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_x());
    }

    // int32 y = 3;
    if (this->y() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_y());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void client_gobang_position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:client_gobang_position)
            GOOGLE_DCHECK_NE(&from, this);
    const client_gobang_position *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<client_gobang_position>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:client_gobang_position)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:client_gobang_position)
        MergeFrom(*source);
    }
}

void client_gobang_position::MergeFrom(const client_gobang_position &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client_gobang_position)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.cmd() != 0) {
        _internal_set_cmd(from._internal_cmd());
    }
    if (from.x() != 0) {
        _internal_set_x(from._internal_x());
    }
    if (from.y() != 0) {
        _internal_set_y(from._internal_y());
    }
}

void client_gobang_position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:client_gobang_position)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void client_gobang_position::CopyFrom(const client_gobang_position &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client_gobang_position)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool client_gobang_position::IsInitialized() const {
    return true;
}

void client_gobang_position::InternalSwap(client_gobang_position *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(client_gobang_position, y_)
            + sizeof(client_gobang_position::y_)
            - PROTOBUF_FIELD_OFFSET(client_gobang_position, cmd_)>(
            reinterpret_cast<char *>(&cmd_),
            reinterpret_cast<char *>(&other->cmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata client_gobang_position::GetMetadata() const {
    return GetMetadataStatic();
}


// ===================================================================

void server_gobang_position::InitAsDefaultInstance() {
}

class server_gobang_position::_Internal {
public:
};

server_gobang_position::server_gobang_position(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:server_gobang_position)
}

server_gobang_position::server_gobang_position(const server_gobang_position &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::memcpy(&cmd_, &from.cmd_,
             static_cast<size_t>(reinterpret_cast<char *>(&y_) -
                                 reinterpret_cast<char *>(&cmd_)) + sizeof(y_));
    // @@protoc_insertion_point(copy_constructor:server_gobang_position)
}

void server_gobang_position::SharedCtor() {
    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&y_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(y_));
}

server_gobang_position::~server_gobang_position() {
    // @@protoc_insertion_point(destructor:server_gobang_position)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void server_gobang_position::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
}

void server_gobang_position::ArenaDtor(void *object) {
    server_gobang_position *_this = reinterpret_cast< server_gobang_position * >(object);
    (void) _this;
}

void server_gobang_position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void server_gobang_position::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const server_gobang_position &server_gobang_position::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_server_gobang_position_base_2eproto.base);
    return *internal_default_instance();
}


void server_gobang_position::Clear() {
// @@protoc_insertion_point(message_clear_start:server_gobang_position)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&y_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(y_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *
server_gobang_position::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 cmd = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // int32 x = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
                    x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // int32 y = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
                    y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *server_gobang_position::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:server_gobang_position)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
    }

    // int32 x = 2;
    if (this->x() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
    }

    // int32 y = 3;
    if (this->y() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:server_gobang_position)
    return target;
}

size_t server_gobang_position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_gobang_position)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_cmd());
    }

    // int32 x = 2;
    if (this->x() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_x());
    }

    // int32 y = 3;
    if (this->y() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_y());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void server_gobang_position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_gobang_position)
            GOOGLE_DCHECK_NE(&from, this);
    const server_gobang_position *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<server_gobang_position>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_gobang_position)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:server_gobang_position)
        MergeFrom(*source);
    }
}

void server_gobang_position::MergeFrom(const server_gobang_position &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_gobang_position)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.cmd() != 0) {
        _internal_set_cmd(from._internal_cmd());
    }
    if (from.x() != 0) {
        _internal_set_x(from._internal_x());
    }
    if (from.y() != 0) {
        _internal_set_y(from._internal_y());
    }
}

void server_gobang_position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_gobang_position)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void server_gobang_position::CopyFrom(const server_gobang_position &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_gobang_position)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool server_gobang_position::IsInitialized() const {
    return true;
}

void server_gobang_position::InternalSwap(server_gobang_position *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(server_gobang_position, y_)
            + sizeof(server_gobang_position::y_)
            - PROTOBUF_FIELD_OFFSET(server_gobang_position, cmd_)>(
            reinterpret_cast<char *>(&cmd_),
            reinterpret_cast<char *>(&other->cmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata server_gobang_position::GetMetadata() const {
    return GetMetadataStatic();
}


// ===================================================================

void client_login::InitAsDefaultInstance() {
}

class client_login::_Internal {
public:
};

client_login::client_login(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:client_login)
}

client_login::client_login(const client_login &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_username().empty()) {
        username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
                      GetArena());
    }
    passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_passwd().empty()) {
        passwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_passwd(),
                    GetArena());
    }
    cmd_ = from.cmd_;
    // @@protoc_insertion_point(copy_constructor:client_login)
}

void client_login::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_client_login_base_2eproto.base);
    username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    cmd_ = 0;
}

client_login::~client_login() {
    // @@protoc_insertion_point(destructor:client_login)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void client_login::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
    username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    passwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void client_login::ArenaDtor(void *object) {
    client_login *_this = reinterpret_cast< client_login * >(object);
    (void) _this;
}

void client_login::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void client_login::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const client_login &client_login::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_client_login_base_2eproto.base);
    return *internal_default_instance();
}


void client_login::Clear() {
// @@protoc_insertion_point(message_clear_start:client_login)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    passwd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    cmd_ = 0;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *client_login::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 cmd = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // string username = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                    auto str = _internal_mutable_username();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "client_login.username"));
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // string passwd = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
                    auto str = _internal_mutable_passwd();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "client_login.passwd"));
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *client_login::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:client_login)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
    }

    // string username = 2;
    if (this->username().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "client_login.username");
        target = stream->WriteStringMaybeAliased(
                2, this->_internal_username(), target);
    }

    // string passwd = 3;
    if (this->passwd().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_passwd().data(), static_cast<int>(this->_internal_passwd().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "client_login.passwd");
        target = stream->WriteStringMaybeAliased(
                3, this->_internal_passwd(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:client_login)
    return target;
}

size_t client_login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client_login)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // string username = 2;
    if (this->username().size() > 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_username());
    }

    // string passwd = 3;
    if (this->passwd().size() > 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_passwd());
    }

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_cmd());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void client_login::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:client_login)
            GOOGLE_DCHECK_NE(&from, this);
    const client_login *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<client_login>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:client_login)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:client_login)
        MergeFrom(*source);
    }
}

void client_login::MergeFrom(const client_login &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client_login)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.username().size() > 0) {
        _internal_set_username(from._internal_username());
    }
    if (from.passwd().size() > 0) {
        _internal_set_passwd(from._internal_passwd());
    }
    if (from.cmd() != 0) {
        _internal_set_cmd(from._internal_cmd());
    }
}

void client_login::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:client_login)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void client_login::CopyFrom(const client_login &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client_login)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool client_login::IsInitialized() const {
    return true;
}

void client_login::InternalSwap(client_login *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    passwd_.Swap(&other->passwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata client_login::GetMetadata() const {
    return GetMetadataStatic();
}


// ===================================================================

void server_login::InitAsDefaultInstance() {
}

class server_login::_Internal {
public:
};

server_login::server_login(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:server_login)
}

server_login::server_login(const server_login &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_token().empty()) {
        token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_token(),
                   GetArena());
    }
    message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_message().empty()) {
        message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
                     GetArena());
    }
    cmd_ = from.cmd_;
    // @@protoc_insertion_point(copy_constructor:server_login)
}

void server_login::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_server_login_base_2eproto.base);
    token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    cmd_ = 0;
}

server_login::~server_login() {
    // @@protoc_insertion_point(destructor:server_login)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void server_login::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
    token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void server_login::ArenaDtor(void *object) {
    server_login *_this = reinterpret_cast< server_login * >(object);
    (void) _this;
}

void server_login::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void server_login::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const server_login &server_login::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_server_login_base_2eproto.base);
    return *internal_default_instance();
}


void server_login::Clear() {
// @@protoc_insertion_point(message_clear_start:server_login)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    cmd_ = 0;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *server_login::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 cmd = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // string token = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                    auto str = _internal_mutable_token();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server_login.token"));
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // string message = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
                    auto str = _internal_mutable_message();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server_login.message"));
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *server_login::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:server_login)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
    }

    // string token = 2;
    if (this->token().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "server_login.token");
        target = stream->WriteStringMaybeAliased(
                2, this->_internal_token(), target);
    }

    // string message = 3;
    if (this->message().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "server_login.message");
        target = stream->WriteStringMaybeAliased(
                3, this->_internal_message(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:server_login)
    return target;
}

size_t server_login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_login)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // string token = 2;
    if (this->token().size() > 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_token());
    }

    // string message = 3;
    if (this->message().size() > 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_message());
    }

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_cmd());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void server_login::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_login)
            GOOGLE_DCHECK_NE(&from, this);
    const server_login *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<server_login>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_login)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:server_login)
        MergeFrom(*source);
    }
}

void server_login::MergeFrom(const server_login &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_login)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.token().size() > 0) {
        _internal_set_token(from._internal_token());
    }
    if (from.message().size() > 0) {
        _internal_set_message(from._internal_message());
    }
    if (from.cmd() != 0) {
        _internal_set_cmd(from._internal_cmd());
    }
}

void server_login::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_login)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void server_login::CopyFrom(const server_login &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_login)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool server_login::IsInitialized() const {
    return true;
}

void server_login::InternalSwap(server_login *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata server_login::GetMetadata() const {
    return GetMetadataStatic();
}


// ===================================================================

void client_register::InitAsDefaultInstance() {
}

class client_register::_Internal {
public:
};

client_register::client_register(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:client_register)
}

client_register::client_register(const client_register &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_username().empty()) {
        username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
                      GetArena());
    }
    passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_passwd().empty()) {
        passwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_passwd(),
                    GetArena());
    }
    cmd_ = from.cmd_;
    // @@protoc_insertion_point(copy_constructor:client_register)
}

void client_register::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_client_register_base_2eproto.base);
    username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    passwd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    cmd_ = 0;
}

client_register::~client_register() {
    // @@protoc_insertion_point(destructor:client_register)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void client_register::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
    username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    passwd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void client_register::ArenaDtor(void *object) {
    client_register *_this = reinterpret_cast< client_register * >(object);
    (void) _this;
}

void client_register::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void client_register::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const client_register &client_register::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_client_register_base_2eproto.base);
    return *internal_default_instance();
}


void client_register::Clear() {
// @@protoc_insertion_point(message_clear_start:client_register)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    passwd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    cmd_ = 0;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *client_register::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 cmd = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // string username = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                    auto str = _internal_mutable_username();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "client_register.username"));
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // string passwd = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
                    auto str = _internal_mutable_passwd();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "client_register.passwd"));
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *client_register::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:client_register)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
    }

    // string username = 2;
    if (this->username().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "client_register.username");
        target = stream->WriteStringMaybeAliased(
                2, this->_internal_username(), target);
    }

    // string passwd = 3;
    if (this->passwd().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_passwd().data(), static_cast<int>(this->_internal_passwd().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "client_register.passwd");
        target = stream->WriteStringMaybeAliased(
                3, this->_internal_passwd(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:client_register)
    return target;
}

size_t client_register::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client_register)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // string username = 2;
    if (this->username().size() > 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_username());
    }

    // string passwd = 3;
    if (this->passwd().size() > 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_passwd());
    }

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_cmd());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void client_register::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:client_register)
            GOOGLE_DCHECK_NE(&from, this);
    const client_register *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<client_register>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:client_register)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:client_register)
        MergeFrom(*source);
    }
}

void client_register::MergeFrom(const client_register &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client_register)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.username().size() > 0) {
        _internal_set_username(from._internal_username());
    }
    if (from.passwd().size() > 0) {
        _internal_set_passwd(from._internal_passwd());
    }
    if (from.cmd() != 0) {
        _internal_set_cmd(from._internal_cmd());
    }
}

void client_register::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:client_register)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void client_register::CopyFrom(const client_register &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client_register)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool client_register::IsInitialized() const {
    return true;
}

void client_register::InternalSwap(client_register *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    passwd_.Swap(&other->passwd_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata client_register::GetMetadata() const {
    return GetMetadataStatic();
}


// ===================================================================

void server_register::InitAsDefaultInstance() {
}

class server_register::_Internal {
public:
};

server_register::server_register(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:server_register)
}

server_register::server_register(const server_register &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_message().empty()) {
        message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
                     GetArena());
    }
    ::memcpy(&cmd_, &from.cmd_,
             static_cast<size_t>(reinterpret_cast<char *>(&issuccess_) -
                                 reinterpret_cast<char *>(&cmd_)) + sizeof(issuccess_));
    // @@protoc_insertion_point(copy_constructor:server_register)
}

void server_register::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_server_register_base_2eproto.base);
    message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&issuccess_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(issuccess_));
}

server_register::~server_register() {
    // @@protoc_insertion_point(destructor:server_register)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void server_register::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
    message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void server_register::ArenaDtor(void *object) {
    server_register *_this = reinterpret_cast< server_register * >(object);
    (void) _this;
}

void server_register::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void server_register::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const server_register &server_register::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_server_register_base_2eproto.base);
    return *internal_default_instance();
}


void server_register::Clear() {
// @@protoc_insertion_point(message_clear_start:server_register)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::memset(&cmd_, 0, static_cast<size_t>(
                               reinterpret_cast<char *>(&issuccess_) -
                               reinterpret_cast<char *>(&cmd_)) + sizeof(issuccess_));
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *server_register::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 cmd = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // int32 isSuccess = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
                    issuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // string message = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
                    auto str = _internal_mutable_message();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "server_register.message"));
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *server_register::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:server_register)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
    }

    // int32 isSuccess = 2;
    if (this->issuccess() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_issuccess(),
                                                                                      target);
    }

    // string message = 3;
    if (this->message().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "server_register.message");
        target = stream->WriteStringMaybeAliased(
                3, this->_internal_message(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:server_register)
    return target;
}

size_t server_register::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_register)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // string message = 3;
    if (this->message().size() > 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_message());
    }

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_cmd());
    }

    // int32 isSuccess = 2;
    if (this->issuccess() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_issuccess());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void server_register::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_register)
            GOOGLE_DCHECK_NE(&from, this);
    const server_register *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<server_register>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_register)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:server_register)
        MergeFrom(*source);
    }
}

void server_register::MergeFrom(const server_register &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_register)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.message().size() > 0) {
        _internal_set_message(from._internal_message());
    }
    if (from.cmd() != 0) {
        _internal_set_cmd(from._internal_cmd());
    }
    if (from.issuccess() != 0) {
        _internal_set_issuccess(from._internal_issuccess());
    }
}

void server_register::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_register)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void server_register::CopyFrom(const server_register &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_register)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool server_register::IsInitialized() const {
    return true;
}

void server_register::InternalSwap(server_register *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(server_register, issuccess_)
            + sizeof(server_register::issuccess_)
            - PROTOBUF_FIELD_OFFSET(server_register, cmd_)>(
            reinterpret_cast<char *>(&cmd_),
            reinterpret_cast<char *>(&other->cmd_));
}

::PROTOBUF_NAMESPACE_ID::Metadata server_register::GetMetadata() const {
    return GetMetadataStatic();
}


// ===================================================================

void test::InitAsDefaultInstance() {
}

class test::_Internal {
public:
};

test::test(::PROTOBUF_NAMESPACE_ID::Arena *arena)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
    SharedCtor();
    RegisterArenaDtor(arena);
    // @@protoc_insertion_point(arena_constructor:test)
}

test::test(const test &from)
        : ::PROTOBUF_NAMESPACE_ID::Message() {
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    inform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    if (!from._internal_inform().empty()) {
        inform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_inform(),
                    GetArena());
    }
    cmd_ = from.cmd_;
    // @@protoc_insertion_point(copy_constructor:test)
}

void test::SharedCtor() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_test_base_2eproto.base);
    inform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    cmd_ = 0;
}

test::~test() {
    // @@protoc_insertion_point(destructor:test)
    SharedDtor();
    _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void test::SharedDtor() {
            GOOGLE_DCHECK(GetArena() == nullptr);
    inform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void test::ArenaDtor(void *object) {
    test *_this = reinterpret_cast< test * >(object);
    (void) _this;
}

void test::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *) {
}

void test::SetCachedSize(int size) const {
    _cached_size_.Set(size);
}

const test &test::default_instance() {
    ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_test_base_2eproto.base);
    return *internal_default_instance();
}


void test::Clear() {
// @@protoc_insertion_point(message_clear_start:test)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    inform_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    cmd_ = 0;
    _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char *test::_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
    ::PROTOBUF_NAMESPACE_ID::Arena *arena = GetArena();
    (void) arena;
    while (!ctx->Done(&ptr)) {
        ::PROTOBUF_NAMESPACE_ID::uint32 tag;
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        CHK_(ptr);
        switch (tag >> 3) {
            // int32 cmd = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
                    cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
                // string inform = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
                    auto str = _internal_mutable_inform();
                    ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "test.inform"));
                    CHK_(ptr);
                } else goto handle_unusual;
                continue;
            default: {
                handle_unusual:
                if ((tag & 7) == 4 || tag == 0) {
                    ctx->SetLastTag(tag);
                    goto success;
                }
                ptr = UnknownFieldParse(tag,
                                        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                                        ptr, ctx);
                CHK_(ptr != nullptr);
                continue;
            }
        }  // switch
    }  // while
    success:
    return ptr;
    failure:
    ptr = nullptr;
    goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8 *test::_InternalSerialize(
        ::PROTOBUF_NAMESPACE_ID::uint8 *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const {
    // @@protoc_insertion_point(serialize_to_array_start:test)
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        target = stream->EnsureSpace(target);
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd(), target);
    }

    // string inform = 2;
    if (this->inform().size() > 0) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_inform().data(), static_cast<int>(this->_internal_inform().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "test.inform");
        target = stream->WriteStringMaybeAliased(
                2, this->_internal_inform(), target);
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
                        ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
    }
    // @@protoc_insertion_point(serialize_to_array_end:test)
    return target;
}

size_t test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test)
    size_t total_size = 0;

    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void) cached_has_bits;

    // string inform = 2;
    if (this->inform().size() > 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_inform());
    }

    // int32 cmd = 1;
    if (this->cmd() != 0) {
        total_size += 1 +
                      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                              this->_internal_cmd());
    }

    if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
        return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
                _internal_metadata_, total_size, &_cached_size_);
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void test::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_merge_from_start:test)
            GOOGLE_DCHECK_NE(&from, this);
    const test *source =
            ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<test>(
                    &from);
    if (source == nullptr) {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:test)
        ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
    } else {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:test)
        MergeFrom(*source);
    }
}

void test::MergeFrom(const test &from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test)
            GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
    (void) cached_has_bits;

    if (from.inform().size() > 0) {
        _internal_set_inform(from._internal_inform());
    }
    if (from.cmd() != 0) {
        _internal_set_cmd(from._internal_cmd());
    }
}

void test::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
// @@protoc_insertion_point(generalized_copy_from_start:test)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

void test::CopyFrom(const test &from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test)
    if (&from == this) return;
    Clear();
    MergeFrom(from);
}

bool test::IsInitialized() const {
    return true;
}

void test::InternalSwap(test *other) {
    using std::swap;
    _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
    inform_.Swap(&other->inform_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata test::GetMetadata() const {
    return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
        template<>
        PROTOBUF_NOINLINE ::cmd *Arena::CreateMaybeMessage<::cmd>(Arena *arena) {
            return Arena::CreateMessageInternal<::cmd>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::client_gobang_position *Arena::CreateMaybeMessage<::client_gobang_position>(Arena *arena) {
            return Arena::CreateMessageInternal<::client_gobang_position>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::server_gobang_position *Arena::CreateMaybeMessage<::server_gobang_position>(Arena *arena) {
            return Arena::CreateMessageInternal<::server_gobang_position>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::client_login *Arena::CreateMaybeMessage<::client_login>(Arena *arena) {
            return Arena::CreateMessageInternal<::client_login>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::server_login *Arena::CreateMaybeMessage<::server_login>(Arena *arena) {
            return Arena::CreateMessageInternal<::server_login>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::client_register *Arena::CreateMaybeMessage<::client_register>(Arena *arena) {
            return Arena::CreateMessageInternal<::client_register>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::server_register *Arena::CreateMaybeMessage<::server_register>(Arena *arena) {
            return Arena::CreateMessageInternal<::server_register>(arena);
        }

        template<>
        PROTOBUF_NOINLINE ::test *Arena::CreateMaybeMessage<::test>(Arena *arena) {
            return Arena::CreateMessageInternal<::test>(arena);
        }
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
