// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_base_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_base_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_base_2eproto
PROTOBUF_NAMESPACE_OPEN
        namespace internal {
            class AnyMetadata;
        }  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_base_2eproto {
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
    static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
    static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_2eproto;
class chatMessage;
class chatMessageDefaultTypeInternal;
extern chatMessageDefaultTypeInternal _chatMessage_default_instance_;
class client_create_game;
class client_create_gameDefaultTypeInternal;
extern client_create_gameDefaultTypeInternal _client_create_game_default_instance_;
class client_game_invite;
class client_game_inviteDefaultTypeInternal;
extern client_game_inviteDefaultTypeInternal _client_game_invite_default_instance_;
class client_gobang_position;
class client_gobang_positionDefaultTypeInternal;

extern client_gobang_positionDefaultTypeInternal _client_gobang_position_default_instance_;

class client_login;

class client_loginDefaultTypeInternal;

extern client_loginDefaultTypeInternal _client_login_default_instance_;

class client_register;

class client_registerDefaultTypeInternal;

extern client_registerDefaultTypeInternal _client_register_default_instance_;

class cmd;

class cmdDefaultTypeInternal;

extern cmdDefaultTypeInternal _cmd_default_instance_;

class requestResources;

class requestResourcesDefaultTypeInternal;

extern requestResourcesDefaultTypeInternal _requestResources_default_instance_;

class responseResources;

class responseResourcesDefaultTypeInternal;

extern responseResourcesDefaultTypeInternal _responseResources_default_instance_;

class server_game_invite;

class server_game_inviteDefaultTypeInternal;

extern server_game_inviteDefaultTypeInternal _server_game_invite_default_instance_;

class server_game_isInvite;

class server_game_isInviteDefaultTypeInternal;

extern server_game_isInviteDefaultTypeInternal _server_game_isInvite_default_instance_;

class server_gobang_position;

class server_gobang_positionDefaultTypeInternal;

extern server_gobang_positionDefaultTypeInternal _server_gobang_position_default_instance_;

class server_login;
class server_loginDefaultTypeInternal;
extern server_loginDefaultTypeInternal _server_login_default_instance_;
class server_online_infor;
class server_online_inforDefaultTypeInternal;
extern server_online_inforDefaultTypeInternal _server_online_infor_default_instance_;
class server_register;
class server_registerDefaultTypeInternal;
extern server_registerDefaultTypeInternal _server_register_default_instance_;
class server_user_infor;
class server_user_inforDefaultTypeInternal;
extern server_user_inforDefaultTypeInternal _server_user_infor_default_instance_;
class test;
class testDefaultTypeInternal;
extern testDefaultTypeInternal _test_default_instance_;
class whoWin;
class whoWinDefaultTypeInternal;
extern whoWinDefaultTypeInternal _whoWin_default_instance_;
class withDraw;
class withDrawDefaultTypeInternal;
extern withDrawDefaultTypeInternal _withDraw_default_instance_;
PROTOBUF_NAMESPACE_OPEN
        template<>
        ::chatMessage *Arena::CreateMaybeMessage<::chatMessage>(Arena *);

        template<>
        ::client_create_game *Arena::CreateMaybeMessage<::client_create_game>(Arena *);

        template<>
        ::client_game_invite *Arena::CreateMaybeMessage<::client_game_invite>(Arena *);

        template<>
        ::client_gobang_position *Arena::CreateMaybeMessage<::client_gobang_position>(Arena *);

        template<>
        ::client_login *Arena::CreateMaybeMessage<::client_login>(Arena *);

        template<>
        ::client_register *Arena::CreateMaybeMessage<::client_register>(Arena *);

        template<>
        ::cmd *Arena::CreateMaybeMessage<::cmd>(Arena *);

        template<>
        ::requestResources *Arena::CreateMaybeMessage<::requestResources>(Arena *);

        template<>
        ::responseResources *Arena::CreateMaybeMessage<::responseResources>(Arena *);

        template<>
        ::server_game_invite *Arena::CreateMaybeMessage<::server_game_invite>(Arena *);

        template<>
        ::server_game_isInvite *Arena::CreateMaybeMessage<::server_game_isInvite>(Arena *);

        template<>
        ::server_gobang_position *Arena::CreateMaybeMessage<::server_gobang_position>(Arena *);

        template<>
        ::server_login *Arena::CreateMaybeMessage<::server_login>(Arena *);

        template<>
        ::server_online_infor *Arena::CreateMaybeMessage<::server_online_infor>(Arena *);

        template<>
        ::server_register *Arena::CreateMaybeMessage<::server_register>(Arena *);

        template<>
        ::server_user_infor *Arena::CreateMaybeMessage<::server_user_infor>(Arena *);

        template<>
        ::test *Arena::CreateMaybeMessage<::test>(Arena *);

        template<>
        ::whoWin *Arena::CreateMaybeMessage<::whoWin>(Arena *);

        template<>
        ::withDraw *Arena::CreateMaybeMessage<::withDraw>(Arena *);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class cmd PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cmd) */ {
public:
    inline cmd() : cmd(nullptr) {};

    virtual ~cmd();

    cmd(const cmd &from);

    cmd(cmd &&from) noexcept
            : cmd() {
        *this = ::std::move(from);
    }

    inline cmd &operator=(const cmd &from) {
        CopyFrom(from);
        return *this;
    }

    inline cmd &operator=(cmd &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const cmd &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const cmd *internal_default_instance() {
        return reinterpret_cast<const cmd *>(
                &_cmd_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            0;

    friend void swap(cmd &a, cmd &b) {
        a.Swap(&b);
    }

    inline void Swap(cmd *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(cmd *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline cmd *New() const final {
        return CreateMaybeMessage<cmd>(nullptr);
    }

    cmd *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<cmd>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const cmd &from);

    void MergeFrom(const cmd &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(cmd *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "cmd";
    }

protected:
    explicit cmd(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kCFieldNumber = 1,
    };

    // int32 c = 1;
    void clear_c();

    ::PROTOBUF_NAMESPACE_ID::int32 c() const;

    void set_c(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_c() const;

    void _internal_set_c(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:cmd)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 c_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class client_gobang_position PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client_gobang_position) */ {
public:
    inline client_gobang_position() : client_gobang_position(nullptr) {};

    virtual ~client_gobang_position();

    client_gobang_position(const client_gobang_position &from);

    client_gobang_position(client_gobang_position &&from) noexcept
            : client_gobang_position() {
        *this = ::std::move(from);
    }

    inline client_gobang_position &operator=(const client_gobang_position &from) {
        CopyFrom(from);
        return *this;
    }

    inline client_gobang_position &operator=(client_gobang_position &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const client_gobang_position &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const client_gobang_position *internal_default_instance() {
        return reinterpret_cast<const client_gobang_position *>(
                &_client_gobang_position_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            1;

    friend void swap(client_gobang_position &a, client_gobang_position &b) {
        a.Swap(&b);
    }

    inline void Swap(client_gobang_position *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(client_gobang_position *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline client_gobang_position *New() const final {
        return CreateMaybeMessage<client_gobang_position>(nullptr);
    }

    client_gobang_position *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<client_gobang_position>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const client_gobang_position &from);

    void MergeFrom(const client_gobang_position &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(client_gobang_position *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "client_gobang_position";
    }

protected:
    explicit client_gobang_position(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kCmdFieldNumber = 1,
        kXFieldNumber = 2,
        kYFieldNumber = 3,
    };

    // int32 cmd = 1;
    void clear_cmd();

    ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;

    void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;

    void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 x = 2;
    void clear_x();

    ::PROTOBUF_NAMESPACE_ID::int32 x() const;

    void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;

    void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 y = 3;
    void clear_y();

    ::PROTOBUF_NAMESPACE_ID::int32 y() const;

    void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;

    void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:client_gobang_position)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
    ::PROTOBUF_NAMESPACE_ID::int32 x_;
    ::PROTOBUF_NAMESPACE_ID::int32 y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class server_gobang_position PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_gobang_position) */ {
public:
    inline server_gobang_position() : server_gobang_position(nullptr) {};

    virtual ~server_gobang_position();

    server_gobang_position(const server_gobang_position &from);

    server_gobang_position(server_gobang_position &&from) noexcept
            : server_gobang_position() {
        *this = ::std::move(from);
    }

    inline server_gobang_position &operator=(const server_gobang_position &from) {
        CopyFrom(from);
        return *this;
    }

    inline server_gobang_position &operator=(server_gobang_position &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const server_gobang_position &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const server_gobang_position *internal_default_instance() {
        return reinterpret_cast<const server_gobang_position *>(
                &_server_gobang_position_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            2;

    friend void swap(server_gobang_position &a, server_gobang_position &b) {
        a.Swap(&b);
    }

    inline void Swap(server_gobang_position *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(server_gobang_position *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline server_gobang_position *New() const final {
        return CreateMaybeMessage<server_gobang_position>(nullptr);
    }

    server_gobang_position *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<server_gobang_position>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const server_gobang_position &from);

    void MergeFrom(const server_gobang_position &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(server_gobang_position *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "server_gobang_position";
    }

protected:
    explicit server_gobang_position(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kCmdFieldNumber = 1,
        kXFieldNumber = 2,
        kYFieldNumber = 3,
    };

    // int32 cmd = 1;
    void clear_cmd();

    ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;

    void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;

    void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 x = 2;
    void clear_x();

    ::PROTOBUF_NAMESPACE_ID::int32 x() const;

    void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;

    void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 y = 3;
    void clear_y();

    ::PROTOBUF_NAMESPACE_ID::int32 y() const;

    void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;

    void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:server_gobang_position)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
    ::PROTOBUF_NAMESPACE_ID::int32 x_;
    ::PROTOBUF_NAMESPACE_ID::int32 y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class client_login PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client_login) */ {
public:
    inline client_login() : client_login(nullptr) {};

    virtual ~client_login();

    client_login(const client_login &from);

    client_login(client_login &&from) noexcept
            : client_login() {
        *this = ::std::move(from);
    }

    inline client_login &operator=(const client_login &from) {
        CopyFrom(from);
        return *this;
    }

    inline client_login &operator=(client_login &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const client_login &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const client_login *internal_default_instance() {
        return reinterpret_cast<const client_login *>(
                &_client_login_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            3;

    friend void swap(client_login &a, client_login &b) {
        a.Swap(&b);
    }

    inline void Swap(client_login *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(client_login *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline client_login *New() const final {
        return CreateMaybeMessage<client_login>(nullptr);
    }

    client_login *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<client_login>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const client_login &from);

    void MergeFrom(const client_login &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(client_login *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "client_login";
    }

protected:
    explicit client_login(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kUsernameFieldNumber = 2,
        kPasswdFieldNumber = 3,
        kCmdFieldNumber = 1,
    };

    // string username = 2;
    void clear_username();

    const std::string &username() const;

    void set_username(const std::string &value);

    void set_username(std::string &&value);

    void set_username(const char *value);

    void set_username(const char *value, size_t size);

    std::string *mutable_username();

    std::string *release_username();

    void set_allocated_username(std::string *username);

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string *unsafe_arena_release_username();

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_username(
            std::string *username);

private:
    const std::string &_internal_username() const;

    void _internal_set_username(const std::string &value);

    std::string *_internal_mutable_username();

public:

    // string passwd = 3;
    void clear_passwd();

    const std::string &passwd() const;

    void set_passwd(const std::string &value);

    void set_passwd(std::string &&value);

    void set_passwd(const char *value);

    void set_passwd(const char *value, size_t size);

    std::string *mutable_passwd();

    std::string *release_passwd();

    void set_allocated_passwd(std::string *passwd);

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string *unsafe_arena_release_passwd();

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_passwd(
            std::string *passwd);

private:
    const std::string &_internal_passwd() const;

    void _internal_set_passwd(const std::string &value);

    std::string *_internal_mutable_passwd();

public:

    // int32 cmd = 1;
    void clear_cmd();

    ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;

    void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;

    void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:client_login)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
    ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class server_login PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_login) */ {
public:
    inline server_login() : server_login(nullptr) {};

    virtual ~server_login();

    server_login(const server_login &from);

    server_login(server_login &&from) noexcept
            : server_login() {
        *this = ::std::move(from);
    }

    inline server_login &operator=(const server_login &from) {
        CopyFrom(from);
        return *this;
    }

    inline server_login &operator=(server_login &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const server_login &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const server_login *internal_default_instance() {
        return reinterpret_cast<const server_login *>(
                &_server_login_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            4;

    friend void swap(server_login &a, server_login &b) {
        a.Swap(&b);
    }

    inline void Swap(server_login *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(server_login *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline server_login *New() const final {
        return CreateMaybeMessage<server_login>(nullptr);
    }

    server_login *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<server_login>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const server_login &from);

    void MergeFrom(const server_login &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(server_login *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "server_login";
    }

protected:
    explicit server_login(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kMessageFieldNumber = 3,
        kCmdFieldNumber = 1,
        kIsSuccessFieldNumber = 2,
    };

    // string message = 3;
    void clear_message();

    const std::string &message() const;

    void set_message(const std::string &value);

    void set_message(std::string &&value);

    void set_message(const char *value);

    void set_message(const char *value, size_t size);

    std::string *mutable_message();

    std::string *release_message();

    void set_allocated_message(std::string *message);

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string *unsafe_arena_release_message();

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_message(
            std::string *message);

private:
    const std::string &_internal_message() const;

    void _internal_set_message(const std::string &value);

    std::string *_internal_mutable_message();

public:

    // int32 cmd = 1;
    void clear_cmd();

    ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;

    void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;

    void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 isSuccess = 2;
    void clear_issuccess();

    ::PROTOBUF_NAMESPACE_ID::int32 issuccess() const;

    void set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_issuccess() const;

    void _internal_set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:server_login)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
    ::PROTOBUF_NAMESPACE_ID::int32 issuccess_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class client_register PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client_register) */ {
public:
    inline client_register() : client_register(nullptr) {};

    virtual ~client_register();

    client_register(const client_register &from);

    client_register(client_register &&from) noexcept
            : client_register() {
        *this = ::std::move(from);
    }

    inline client_register &operator=(const client_register &from) {
        CopyFrom(from);
        return *this;
    }

    inline client_register &operator=(client_register &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const client_register &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const client_register *internal_default_instance() {
        return reinterpret_cast<const client_register *>(
                &_client_register_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            5;

    friend void swap(client_register &a, client_register &b) {
        a.Swap(&b);
    }

    inline void Swap(client_register *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(client_register *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline client_register *New() const final {
        return CreateMaybeMessage<client_register>(nullptr);
    }

    client_register *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<client_register>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const client_register &from);

    void MergeFrom(const client_register &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(client_register *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "client_register";
    }

protected:
    explicit client_register(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kUsernameFieldNumber = 2,
        kPasswdFieldNumber = 3,
        kNichengFieldNumber = 4,
        kEmailFieldNumber = 5,
        kTouxiangFieldNumber = 6,
        kCmdFieldNumber = 1,
    };

    // string username = 2;
    void clear_username();

    const std::string &username() const;

    void set_username(const std::string &value);

    void set_username(std::string &&value);

    void set_username(const char *value);

    void set_username(const char *value, size_t size);

    std::string *mutable_username();

    std::string *release_username();

    void set_allocated_username(std::string *username);

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string *unsafe_arena_release_username();

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_username(
            std::string *username);

private:
    const std::string &_internal_username() const;

    void _internal_set_username(const std::string &value);

    std::string *_internal_mutable_username();

public:

    // string passwd = 3;
    void clear_passwd();

    const std::string &passwd() const;

    void set_passwd(const std::string &value);

    void set_passwd(std::string &&value);

    void set_passwd(const char *value);

    void set_passwd(const char *value, size_t size);

    std::string *mutable_passwd();

    std::string *release_passwd();

    void set_allocated_passwd(std::string *passwd);

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string *unsafe_arena_release_passwd();

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_passwd(
            std::string *passwd);

private:
    const std::string &_internal_passwd() const;

    void _internal_set_passwd(const std::string &value);

    std::string *_internal_mutable_passwd();

public:

    // string nicheng = 4;
    void clear_nicheng();

    const std::string &nicheng() const;

    void set_nicheng(const std::string &value);

    void set_nicheng(std::string &&value);

    void set_nicheng(const char *value);

    void set_nicheng(const char *value, size_t size);

    std::string *mutable_nicheng();

    std::string *release_nicheng();

    void set_allocated_nicheng(std::string *nicheng);

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string *unsafe_arena_release_nicheng();

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_nicheng(
            std::string *nicheng);

private:
    const std::string &_internal_nicheng() const;

    void _internal_set_nicheng(const std::string &value);

    std::string *_internal_mutable_nicheng();

public:

    // string email = 5;
    void clear_email();

    const std::string &email() const;

    void set_email(const std::string &value);

    void set_email(std::string &&value);

    void set_email(const char *value);

    void set_email(const char *value, size_t size);

    std::string *mutable_email();

    std::string *release_email();

    void set_allocated_email(std::string *email);

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string *unsafe_arena_release_email();

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_email(
            std::string *email);

private:
    const std::string &_internal_email() const;

    void _internal_set_email(const std::string &value);

    std::string *_internal_mutable_email();

public:

    // string touxiang = 6;
    void clear_touxiang();

    const std::string &touxiang() const;

    void set_touxiang(const std::string &value);

    void set_touxiang(std::string &&value);

    void set_touxiang(const char *value);

    void set_touxiang(const char *value, size_t size);

    std::string *mutable_touxiang();

    std::string *release_touxiang();

    void set_allocated_touxiang(std::string *touxiang);

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string *unsafe_arena_release_touxiang();

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_touxiang(
            std::string *touxiang);

private:
    const std::string &_internal_touxiang() const;

    void _internal_set_touxiang(const std::string &value);

    std::string *_internal_mutable_touxiang();

public:

    // int32 cmd = 1;
    void clear_cmd();

    ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;

    void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;

    void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:client_register)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nicheng_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr touxiang_;
    ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class server_register PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_register) */ {
public:
    inline server_register() : server_register(nullptr) {};

    virtual ~server_register();

    server_register(const server_register &from);

    server_register(server_register &&from) noexcept
            : server_register() {
        *this = ::std::move(from);
    }

    inline server_register &operator=(const server_register &from) {
        CopyFrom(from);
        return *this;
    }

    inline server_register &operator=(server_register &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const server_register &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const server_register *internal_default_instance() {
        return reinterpret_cast<const server_register *>(
                &_server_register_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            6;

    friend void swap(server_register &a, server_register &b) {
        a.Swap(&b);
    }

    inline void Swap(server_register *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(server_register *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline server_register *New() const final {
        return CreateMaybeMessage<server_register>(nullptr);
    }

    server_register *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<server_register>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const server_register &from);

    void MergeFrom(const server_register &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(server_register *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "server_register";
    }

protected:
    explicit server_register(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kMessageFieldNumber = 3,
        kCmdFieldNumber = 1,
        kIsSuccessFieldNumber = 2,
    };

    // string message = 3;
    void clear_message();

    const std::string &message() const;

    void set_message(const std::string &value);

    void set_message(std::string &&value);

    void set_message(const char *value);

    void set_message(const char *value, size_t size);

    std::string *mutable_message();

    std::string *release_message();

    void set_allocated_message(std::string *message);

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string *unsafe_arena_release_message();

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_message(
            std::string *message);

private:
    const std::string &_internal_message() const;

    void _internal_set_message(const std::string &value);

    std::string *_internal_mutable_message();

public:

    // int32 cmd = 1;
    void clear_cmd();

    ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;

    void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;

    void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 isSuccess = 2;
    void clear_issuccess();

    ::PROTOBUF_NAMESPACE_ID::int32 issuccess() const;

    void set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_issuccess() const;

    void _internal_set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:server_register)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
    ::PROTOBUF_NAMESPACE_ID::int32 issuccess_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class client_create_game PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client_create_game) */ {
public:
    inline client_create_game() : client_create_game(nullptr) {};

    virtual ~client_create_game();

    client_create_game(const client_create_game &from);

    client_create_game(client_create_game &&from) noexcept
            : client_create_game() {
        *this = ::std::move(from);
    }

    inline client_create_game &operator=(const client_create_game &from) {
        CopyFrom(from);
        return *this;
    }

    inline client_create_game &operator=(client_create_game &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const client_create_game &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const client_create_game *internal_default_instance() {
        return reinterpret_cast<const client_create_game *>(
                &_client_create_game_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            7;

    friend void swap(client_create_game &a, client_create_game &b) {
        a.Swap(&b);
    }

    inline void Swap(client_create_game *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(client_create_game *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline client_create_game *New() const final {
        return CreateMaybeMessage<client_create_game>(nullptr);
    }

    client_create_game *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<client_create_game>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const client_create_game &from);

    void MergeFrom(const client_create_game &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(client_create_game *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "client_create_game";
    }

protected:
    explicit client_create_game(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kWithUsernameFieldNumber = 2,
        kCmdFieldNumber = 1,
    };

    // string withUsername = 2;
    void clear_withusername();

    const std::string &withusername() const;

    void set_withusername(const std::string &value);

    void set_withusername(std::string &&value);

    void set_withusername(const char *value);

    void set_withusername(const char *value, size_t size);

    std::string *mutable_withusername();

    std::string *release_withusername();

    void set_allocated_withusername(std::string *withusername);

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string *unsafe_arena_release_withusername();

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_withusername(
            std::string *withusername);

private:
    const std::string &_internal_withusername() const;

    void _internal_set_withusername(const std::string &value);

    std::string *_internal_mutable_withusername();

public:

    // int32 cmd = 1;
    void clear_cmd();

    ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;

    void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;

    void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:client_create_game)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr withusername_;
    ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class server_online_infor PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_online_infor) */ {
public:
    inline server_online_infor() : server_online_infor(nullptr) {};

    virtual ~server_online_infor();

    server_online_infor(const server_online_infor &from);

    server_online_infor(server_online_infor &&from) noexcept
            : server_online_infor() {
        *this = ::std::move(from);
    }

    inline server_online_infor &operator=(const server_online_infor &from) {
        CopyFrom(from);
        return *this;
    }

    inline server_online_infor &operator=(server_online_infor &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const server_online_infor &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const server_online_infor *internal_default_instance() {
        return reinterpret_cast<const server_online_infor *>(
                &_server_online_infor_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            8;

    friend void swap(server_online_infor &a, server_online_infor &b) {
        a.Swap(&b);
    }

    inline void Swap(server_online_infor *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(server_online_infor *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline server_online_infor *New() const final {
        return CreateMaybeMessage<server_online_infor>(nullptr);
    }

    server_online_infor *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<server_online_infor>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const server_online_infor &from);

    void MergeFrom(const server_online_infor &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(server_online_infor *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "server_online_infor";
    }

protected:
    explicit server_online_infor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kPeopleFieldNumber = 2,
        kCmdFieldNumber = 1,
    };

    // repeated string people = 2;
    int people_size() const;

private:
    int _internal_people_size() const;

public:
    void clear_people();

    const std::string &people(int index) const;

    std::string *mutable_people(int index);

    void set_people(int index, const std::string &value);

    void set_people(int index, std::string &&value);

    void set_people(int index, const char *value);

    void set_people(int index, const char *value, size_t size);

    std::string *add_people();

    void add_people(const std::string &value);

    void add_people(std::string &&value);

    void add_people(const char *value);

    void add_people(const char *value, size_t size);

    const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> &people() const;

    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> *mutable_people();

private:
    const std::string &_internal_people(int index) const;

    std::string *_internal_add_people();

public:

    // int32 cmd = 1;
    void clear_cmd();

    ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;

    void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;

    void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:server_online_infor)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> people_;
    ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class server_game_invite PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_game_invite) */ {
public:
    inline server_game_invite() : server_game_invite(nullptr) {};

    virtual ~server_game_invite();

    server_game_invite(const server_game_invite &from);

    server_game_invite(server_game_invite &&from) noexcept
            : server_game_invite() {
        *this = ::std::move(from);
    }

    inline server_game_invite &operator=(const server_game_invite &from) {
        CopyFrom(from);
        return *this;
    }

    inline server_game_invite &operator=(server_game_invite &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const server_game_invite &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const server_game_invite *internal_default_instance() {
        return reinterpret_cast<const server_game_invite *>(
                &_server_game_invite_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            9;

    friend void swap(server_game_invite &a, server_game_invite &b) {
        a.Swap(&b);
    }

    inline void Swap(server_game_invite *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(server_game_invite *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline server_game_invite *New() const final {
        return CreateMaybeMessage<server_game_invite>(nullptr);
    }

    server_game_invite *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<server_game_invite>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const server_game_invite &from);

    void MergeFrom(const server_game_invite &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(server_game_invite *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "server_game_invite";
    }

protected:
    explicit server_game_invite(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kPeopleFieldNumber = 2,
        kCmdFieldNumber = 1,
    };

    // string people = 2;
    void clear_people();

    const std::string &people() const;

    void set_people(const std::string &value);

    void set_people(std::string &&value);

    void set_people(const char *value);

    void set_people(const char *value, size_t size);

    std::string *mutable_people();

    std::string *release_people();

    void set_allocated_people(std::string *people);

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string *unsafe_arena_release_people();

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_people(
            std::string *people);

private:
    const std::string &_internal_people() const;

    void _internal_set_people(const std::string &value);

    std::string *_internal_mutable_people();

public:

    // int32 cmd = 1;
    void clear_cmd();

    ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;

    void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;

    void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:server_game_invite)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr people_;
    ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class client_game_invite PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client_game_invite) */ {
public:
    inline client_game_invite() : client_game_invite(nullptr) {};

    virtual ~client_game_invite();

    client_game_invite(const client_game_invite &from);

    client_game_invite(client_game_invite &&from) noexcept
            : client_game_invite() {
        *this = ::std::move(from);
    }

    inline client_game_invite &operator=(const client_game_invite &from) {
        CopyFrom(from);
        return *this;
    }

    inline client_game_invite &operator=(client_game_invite &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const client_game_invite &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const client_game_invite *internal_default_instance() {
        return reinterpret_cast<const client_game_invite *>(
                &_client_game_invite_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            10;

    friend void swap(client_game_invite &a, client_game_invite &b) {
        a.Swap(&b);
    }

    inline void Swap(client_game_invite *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(client_game_invite *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline client_game_invite *New() const final {
        return CreateMaybeMessage<client_game_invite>(nullptr);
    }

    client_game_invite *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<client_game_invite>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const client_game_invite &from);

    void MergeFrom(const client_game_invite &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(client_game_invite *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "client_game_invite";
    }

protected:
    explicit client_game_invite(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kCmdFieldNumber = 1,
        kCodeFieldNumber = 2,
    };

    // int32 cmd = 1;
    void clear_cmd();

    ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;

    void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;

    void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 code = 2;
    void clear_code();

    ::PROTOBUF_NAMESPACE_ID::int32 code() const;

    void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;

    void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:client_game_invite)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
    ::PROTOBUF_NAMESPACE_ID::int32 code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class server_game_isInvite PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_game_isInvite) */ {
public:
    inline server_game_isInvite() : server_game_isInvite(nullptr) {};

    virtual ~server_game_isInvite();

    server_game_isInvite(const server_game_isInvite &from);

    server_game_isInvite(server_game_isInvite &&from) noexcept
            : server_game_isInvite() {
        *this = ::std::move(from);
    }

    inline server_game_isInvite &operator=(const server_game_isInvite &from) {
        CopyFrom(from);
        return *this;
    }

    inline server_game_isInvite &operator=(server_game_isInvite &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const server_game_isInvite &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const server_game_isInvite *internal_default_instance() {
        return reinterpret_cast<const server_game_isInvite *>(
                &_server_game_isInvite_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            11;

    friend void swap(server_game_isInvite &a, server_game_isInvite &b) {
        a.Swap(&b);
    }

    inline void Swap(server_game_isInvite *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(server_game_isInvite *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline server_game_isInvite *New() const final {
        return CreateMaybeMessage<server_game_isInvite>(nullptr);
    }

    server_game_isInvite *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<server_game_isInvite>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const server_game_isInvite &from);

    void MergeFrom(const server_game_isInvite &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(server_game_isInvite *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "server_game_isInvite";
    }

protected:
    explicit server_game_isInvite(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kCmdFieldNumber = 1,
        kCodeFieldNumber = 2,
    };

    // int32 cmd = 1;
    void clear_cmd();

    ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;

    void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;

    void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 code = 2;
    void clear_code();

    ::PROTOBUF_NAMESPACE_ID::int32 code() const;

    void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;

    void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:server_game_isInvite)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
    ::PROTOBUF_NAMESPACE_ID::int32 code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class test PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test) */ {
public:
    inline test() : test(nullptr) {};

    virtual ~test();

    test(const test &from);

    test(test &&from) noexcept
            : test() {
        *this = ::std::move(from);
    }

    inline test &operator=(const test &from) {
        CopyFrom(from);
        return *this;
    }

    inline test &operator=(test &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const test &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const test *internal_default_instance() {
        return reinterpret_cast<const test *>(
                &_test_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            12;

    friend void swap(test &a, test &b) {
        a.Swap(&b);
    }

    inline void Swap(test *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(test *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline test *New() const final {
        return CreateMaybeMessage<test>(nullptr);
    }

    test *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<test>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const test &from);

    void MergeFrom(const test &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(test *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "test";
    }

protected:
    explicit test(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kInformFieldNumber = 2,
        kCmdFieldNumber = 1,
    };

    // string inform = 2;
    void clear_inform();

    const std::string &inform() const;

    void set_inform(const std::string &value);

    void set_inform(std::string &&value);

    void set_inform(const char *value);

    void set_inform(const char *value, size_t size);

    std::string *mutable_inform();

    std::string *release_inform();

    void set_allocated_inform(std::string *inform);

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string *unsafe_arena_release_inform();

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_inform(
            std::string *inform);

private:
    const std::string &_internal_inform() const;

    void _internal_set_inform(const std::string &value);

    std::string *_internal_mutable_inform();

public:

    // int32 cmd = 1;
    void clear_cmd();

    ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;

    void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;

    void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:test)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inform_;
    ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class chatMessage PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:chatMessage) */ {
public:
    inline chatMessage() : chatMessage(nullptr) {};

    virtual ~chatMessage();

    chatMessage(const chatMessage &from);

    chatMessage(chatMessage &&from) noexcept
            : chatMessage() {
        *this = ::std::move(from);
    }

    inline chatMessage &operator=(const chatMessage &from) {
        CopyFrom(from);
        return *this;
    }

    inline chatMessage &operator=(chatMessage &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const chatMessage &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const chatMessage *internal_default_instance() {
        return reinterpret_cast<const chatMessage *>(
                &_chatMessage_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            13;

    friend void swap(chatMessage &a, chatMessage &b) {
        a.Swap(&b);
    }

    inline void Swap(chatMessage *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(chatMessage *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline chatMessage *New() const final {
        return CreateMaybeMessage<chatMessage>(nullptr);
    }

    chatMessage *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<chatMessage>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const chatMessage &from);

    void MergeFrom(const chatMessage &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(chatMessage *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "chatMessage";
    }

protected:
    explicit chatMessage(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kDataFieldNumber = 2,
        kTimeFieldNumber = 3,
        kCmdFieldNumber = 1,
        kTypeFieldNumber = 4,
    };

    // string data = 2;
    void clear_data();

    const std::string &data() const;

    void set_data(const std::string &value);

    void set_data(std::string &&value);

    void set_data(const char *value);

    void set_data(const char *value, size_t size);

    std::string *mutable_data();

    std::string *release_data();

    void set_allocated_data(std::string *data);

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string *unsafe_arena_release_data();

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_data(
            std::string *data);

private:
    const std::string &_internal_data() const;

    void _internal_set_data(const std::string &value);

    std::string *_internal_mutable_data();

public:

    // string time = 3;
    void clear_time();

    const std::string &time() const;

    void set_time(const std::string &value);

    void set_time(std::string &&value);

    void set_time(const char *value);

    void set_time(const char *value, size_t size);

    std::string *mutable_time();

    std::string *release_time();

    void set_allocated_time(std::string *time);

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string *unsafe_arena_release_time();

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_time(
            std::string *time);

private:
    const std::string &_internal_time() const;

    void _internal_set_time(const std::string &value);

    std::string *_internal_mutable_time();

public:

    // int32 cmd = 1;
    void clear_cmd();

    ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;

    void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;

    void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 type = 4;
    void clear_type();

    ::PROTOBUF_NAMESPACE_ID::int32 type() const;

    void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;

    void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:chatMessage)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
    ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
    ::PROTOBUF_NAMESPACE_ID::int32 type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class server_user_infor PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_user_infor) */ {
public:
    inline server_user_infor() : server_user_infor(nullptr) {};

    virtual ~server_user_infor();

    server_user_infor(const server_user_infor &from);

    server_user_infor(server_user_infor &&from) noexcept
            : server_user_infor() {
        *this = ::std::move(from);
    }

    inline server_user_infor &operator=(const server_user_infor &from) {
        CopyFrom(from);
        return *this;
    }

    inline server_user_infor &operator=(server_user_infor &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const server_user_infor &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const server_user_infor *internal_default_instance() {
        return reinterpret_cast<const server_user_infor *>(
                &_server_user_infor_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            14;

    friend void swap(server_user_infor &a, server_user_infor &b) {
        a.Swap(&b);
    }

    inline void Swap(server_user_infor *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(server_user_infor *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline server_user_infor *New() const final {
        return CreateMaybeMessage<server_user_infor>(nullptr);
    }

    server_user_infor *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<server_user_infor>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const server_user_infor &from);

    void MergeFrom(const server_user_infor &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(server_user_infor *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "server_user_infor";
    }

protected:
    explicit server_user_infor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kNameFieldNumber = 2,
        kAvatarFieldNumber = 10,
        kCmdFieldNumber = 1,
        kIntegralFieldNumber = 3,
        kLevelFieldNumber = 4,
        kNumsGameFieldNumber = 5,
        kWinFieldNumber = 6,
        kLoseFieldNumber = 7,
        kDrawFieldNumber = 8,
        kGameCurrencyFieldNumber = 9,
        kCodeFieldNumber = 11,
    };

    // string name = 2;
    void clear_name();

    const std::string &name() const;

    void set_name(const std::string &value);

    void set_name(std::string &&value);

    void set_name(const char *value);

    void set_name(const char *value, size_t size);

    std::string *mutable_name();

    std::string *release_name();

    void set_allocated_name(std::string *name);

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string *unsafe_arena_release_name();

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_name(
            std::string *name);

private:
    const std::string &_internal_name() const;

    void _internal_set_name(const std::string &value);

    std::string *_internal_mutable_name();

public:

    // string avatar = 10;
    void clear_avatar();

    const std::string &avatar() const;

    void set_avatar(const std::string &value);

    void set_avatar(std::string &&value);

    void set_avatar(const char *value);

    void set_avatar(const char *value, size_t size);

    std::string *mutable_avatar();

    std::string *release_avatar();

    void set_allocated_avatar(std::string *avatar);

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string *unsafe_arena_release_avatar();

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_avatar(
            std::string *avatar);

private:
    const std::string &_internal_avatar() const;

    void _internal_set_avatar(const std::string &value);

    std::string *_internal_mutable_avatar();

public:

    // int32 cmd = 1;
    void clear_cmd();

    ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;

    void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;

    void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 integral = 3;
    void clear_integral();

    ::PROTOBUF_NAMESPACE_ID::int32 integral() const;

    void set_integral(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_integral() const;

    void _internal_set_integral(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 level = 4;
    void clear_level();

    ::PROTOBUF_NAMESPACE_ID::int32 level() const;

    void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;

    void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 numsGame = 5;
    void clear_numsgame();

    ::PROTOBUF_NAMESPACE_ID::int32 numsgame() const;

    void set_numsgame(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_numsgame() const;

    void _internal_set_numsgame(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 win = 6;
    void clear_win();

    ::PROTOBUF_NAMESPACE_ID::int32 win() const;

    void set_win(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_win() const;

    void _internal_set_win(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 lose = 7;
    void clear_lose();

    ::PROTOBUF_NAMESPACE_ID::int32 lose() const;

    void set_lose(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_lose() const;

    void _internal_set_lose(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 draw = 8;
    void clear_draw();

    ::PROTOBUF_NAMESPACE_ID::int32 draw() const;

    void set_draw(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_draw() const;

    void _internal_set_draw(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 gameCurrency = 9;
    void clear_gamecurrency();

    ::PROTOBUF_NAMESPACE_ID::int32 gamecurrency() const;

    void set_gamecurrency(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_gamecurrency() const;

    void _internal_set_gamecurrency(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 code = 11;
    void clear_code();

    ::PROTOBUF_NAMESPACE_ID::int32 code() const;

    void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;

    void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:server_user_infor)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
    ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
    ::PROTOBUF_NAMESPACE_ID::int32 integral_;
    ::PROTOBUF_NAMESPACE_ID::int32 level_;
    ::PROTOBUF_NAMESPACE_ID::int32 numsgame_;
    ::PROTOBUF_NAMESPACE_ID::int32 win_;
    ::PROTOBUF_NAMESPACE_ID::int32 lose_;
    ::PROTOBUF_NAMESPACE_ID::int32 draw_;
    ::PROTOBUF_NAMESPACE_ID::int32 gamecurrency_;
    ::PROTOBUF_NAMESPACE_ID::int32 code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class whoWin PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:whoWin) */ {
public:
    inline whoWin() : whoWin(nullptr) {};

    virtual ~whoWin();

    whoWin(const whoWin &from);

    whoWin(whoWin &&from) noexcept
            : whoWin() {
        *this = ::std::move(from);
    }

    inline whoWin &operator=(const whoWin &from) {
        CopyFrom(from);
        return *this;
    }

    inline whoWin &operator=(whoWin &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const whoWin &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const whoWin *internal_default_instance() {
        return reinterpret_cast<const whoWin *>(
                &_whoWin_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            15;

    friend void swap(whoWin &a, whoWin &b) {
        a.Swap(&b);
    }

    inline void Swap(whoWin *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(whoWin *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline whoWin *New() const final {
        return CreateMaybeMessage<whoWin>(nullptr);
    }

    whoWin *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<whoWin>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const whoWin &from);

    void MergeFrom(const whoWin &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(whoWin *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "whoWin";
    }

protected:
    explicit whoWin(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kWinFieldNumber = 3,
        kCmdFieldNumber = 1,
        kCodeFieldNumber = 2,
    };

    // string win = 3;
    void clear_win();

    const std::string &win() const;

    void set_win(const std::string &value);

    void set_win(std::string &&value);

    void set_win(const char *value);

    void set_win(const char *value, size_t size);

    std::string *mutable_win();

    std::string *release_win();

    void set_allocated_win(std::string *win);

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string *unsafe_arena_release_win();

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_win(
            std::string *win);

private:
    const std::string &_internal_win() const;

    void _internal_set_win(const std::string &value);

    std::string *_internal_mutable_win();

public:

    // int32 cmd = 1;
    void clear_cmd();

    ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;

    void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;

    void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 code = 2;
    void clear_code();

    ::PROTOBUF_NAMESPACE_ID::int32 code() const;

    void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;

    void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:whoWin)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr win_;
    ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
    ::PROTOBUF_NAMESPACE_ID::int32 code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class withDraw PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:withDraw) */ {
public:
    inline withDraw() : withDraw(nullptr) {};

    virtual ~withDraw();

    withDraw(const withDraw &from);

    withDraw(withDraw &&from) noexcept
            : withDraw() {
        *this = ::std::move(from);
    }

    inline withDraw &operator=(const withDraw &from) {
        CopyFrom(from);
        return *this;
    }

    inline withDraw &operator=(withDraw &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const withDraw &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const withDraw *internal_default_instance() {
        return reinterpret_cast<const withDraw *>(
                &_withDraw_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            16;

    friend void swap(withDraw &a, withDraw &b) {
        a.Swap(&b);
    }

    inline void Swap(withDraw *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(withDraw *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline withDraw *New() const final {
        return CreateMaybeMessage<withDraw>(nullptr);
    }

    withDraw *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<withDraw>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const withDraw &from);

    void MergeFrom(const withDraw &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(withDraw *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "withDraw";
    }

protected:
    explicit withDraw(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kCmdFieldNumber = 1,
        kNumsFieldNumber = 2,
    };

    // int32 cmd = 1;
    void clear_cmd();

    ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;

    void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;

    void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 nums = 2;
    void clear_nums();

    ::PROTOBUF_NAMESPACE_ID::int32 nums() const;

    void set_nums(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_nums() const;

    void _internal_set_nums(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:withDraw)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
    ::PROTOBUF_NAMESPACE_ID::int32 nums_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class requestResources PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:requestResources) */ {
public:
    inline requestResources() : requestResources(nullptr) {};

    virtual ~requestResources();

    requestResources(const requestResources &from);

    requestResources(requestResources &&from) noexcept
            : requestResources() {
        *this = ::std::move(from);
    }

    inline requestResources &operator=(const requestResources &from) {
        CopyFrom(from);
        return *this;
    }

    inline requestResources &operator=(requestResources &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const requestResources &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const requestResources *internal_default_instance() {
        return reinterpret_cast<const requestResources *>(
                &_requestResources_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            17;

    friend void swap(requestResources &a, requestResources &b) {
        a.Swap(&b);
    }

    inline void Swap(requestResources *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(requestResources *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline requestResources *New() const final {
        return CreateMaybeMessage<requestResources>(nullptr);
    }

    requestResources *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<requestResources>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const requestResources &from);

    void MergeFrom(const requestResources &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(requestResources *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "requestResources";
    }

protected:
    explicit requestResources(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kCmdFieldNumber = 1,
        kCodeFieldNumber = 2,
    };

    // int32 cmd = 1;
    void clear_cmd();

    ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;

    void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;

    void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 code = 2;
    void clear_code();

    ::PROTOBUF_NAMESPACE_ID::int32 code() const;

    void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;

    void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:requestResources)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
    ::PROTOBUF_NAMESPACE_ID::int32 code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class responseResources PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:responseResources) */ {
public:
    inline responseResources() : responseResources(nullptr) {};

    virtual ~responseResources();

    responseResources(const responseResources &from);

    responseResources(responseResources &&from) noexcept
            : responseResources() {
        *this = ::std::move(from);
    }

    inline responseResources &operator=(const responseResources &from) {
        CopyFrom(from);
        return *this;
    }

    inline responseResources &operator=(responseResources &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const responseResources &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const responseResources *internal_default_instance() {
        return reinterpret_cast<const responseResources *>(
                &_responseResources_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            18;

    friend void swap(responseResources &a, responseResources &b) {
        a.Swap(&b);
    }

    inline void Swap(responseResources *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(responseResources *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline responseResources *New() const final {
        return CreateMaybeMessage<responseResources>(nullptr);
    }

    responseResources *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<responseResources>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const responseResources &from);

    void MergeFrom(const responseResources &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(responseResources *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "responseResources";
    }

protected:
    explicit responseResources(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kCmdFieldNumber = 1,
        kCodeFieldNumber = 2,
    };

    // int32 cmd = 1;
    void clear_cmd();

    ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;

    void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;

    void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 code = 2;
    void clear_code();

    ::PROTOBUF_NAMESPACE_ID::int32 code() const;

    void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;

    void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:responseResources)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
    ::PROTOBUF_NAMESPACE_ID::int32 code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// cmd

// int32 c = 1;
inline void cmd::clear_c() {
    c_ = 0;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 cmd::_internal_c() const {
    return c_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 cmd::c() const {
  // @@protoc_insertion_point(field_get:cmd.c)
  return _internal_c();
}
inline void cmd::_internal_set_c(::PROTOBUF_NAMESPACE_ID::int32 value) {

    c_ = value;
}
inline void cmd::set_c(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_c(value);
  // @@protoc_insertion_point(field_set:cmd.c)
}

// -------------------------------------------------------------------

// client_gobang_position

// int32 cmd = 1;
inline void client_gobang_position::clear_cmd() {
  cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 client_gobang_position::_internal_cmd() const {
  return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 client_gobang_position::cmd() const {
  // @@protoc_insertion_point(field_get:client_gobang_position.cmd)
  return _internal_cmd();
}
inline void client_gobang_position::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {

    cmd_ = value;
}
inline void client_gobang_position::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:client_gobang_position.cmd)
}

// int32 x = 2;
inline void client_gobang_position::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 client_gobang_position::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 client_gobang_position::x() const {
  // @@protoc_insertion_point(field_get:client_gobang_position.x)
  return _internal_x();
}
inline void client_gobang_position::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {

    x_ = value;
}
inline void client_gobang_position::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:client_gobang_position.x)
}

// int32 y = 3;
inline void client_gobang_position::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 client_gobang_position::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 client_gobang_position::y() const {
  // @@protoc_insertion_point(field_get:client_gobang_position.y)
  return _internal_y();
}
inline void client_gobang_position::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {

    y_ = value;
}
inline void client_gobang_position::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:client_gobang_position.y)
}

// -------------------------------------------------------------------

// server_gobang_position

// int32 cmd = 1;
inline void server_gobang_position::clear_cmd() {
  cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_gobang_position::_internal_cmd() const {
  return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_gobang_position::cmd() const {
  // @@protoc_insertion_point(field_get:server_gobang_position.cmd)
  return _internal_cmd();
}
inline void server_gobang_position::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {

    cmd_ = value;
}
inline void server_gobang_position::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:server_gobang_position.cmd)
}

// int32 x = 2;
inline void server_gobang_position::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_gobang_position::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_gobang_position::x() const {
  // @@protoc_insertion_point(field_get:server_gobang_position.x)
  return _internal_x();
}
inline void server_gobang_position::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {

    x_ = value;
}
inline void server_gobang_position::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:server_gobang_position.x)
}

// int32 y = 3;
inline void server_gobang_position::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_gobang_position::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_gobang_position::y() const {
  // @@protoc_insertion_point(field_get:server_gobang_position.y)
  return _internal_y();
}
inline void server_gobang_position::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {

    y_ = value;
}
inline void server_gobang_position::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:server_gobang_position.y)
}

// -------------------------------------------------------------------

// client_login

// int32 cmd = 1;
inline void client_login::clear_cmd() {
  cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 client_login::_internal_cmd() const {
  return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 client_login::cmd() const {
  // @@protoc_insertion_point(field_get:client_login.cmd)
  return _internal_cmd();
}
inline void client_login::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {

    cmd_ = value;
}
inline void client_login::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:client_login.cmd)
}

// string username = 2;
inline void client_login::clear_username() {
    username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline const std::string &client_login::username() const {
    // @@protoc_insertion_point(field_get:client_login.username)
    return _internal_username();
}

inline void client_login::set_username(const std::string &value) {
    _internal_set_username(value);
    // @@protoc_insertion_point(field_set:client_login.username)
}

inline std::string *client_login::mutable_username() {
    // @@protoc_insertion_point(field_mutable:client_login.username)
    return _internal_mutable_username();
}

inline const std::string &client_login::_internal_username() const {
    return username_.Get();
}

inline void client_login::_internal_set_username(const std::string &value) {

    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}

inline void client_login::set_username(std::string &&value) {

    username_.Set(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:client_login.username)
}

inline void client_login::set_username(const char *value) {
            GOOGLE_DCHECK(value != nullptr);

    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
                  GetArena());
    // @@protoc_insertion_point(field_set_char:client_login.username)
}

inline void client_login::set_username(const char *value,
                                       size_t size) {

    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
            reinterpret_cast<const char *>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:client_login.username)
}

inline std::string *client_login::_internal_mutable_username() {

    return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline std::string *client_login::release_username() {
    // @@protoc_insertion_point(field_release:client_login.username)
    return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline void client_login::set_allocated_username(std::string *username) {
    if (username != nullptr) {

    } else {

    }
    username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
                           GetArena());
    // @@protoc_insertion_point(field_set_allocated:client_login.username)
}

inline std::string *client_login::unsafe_arena_release_username() {
    // @@protoc_insertion_point(field_unsafe_arena_release:client_login.username)
            GOOGLE_DCHECK(GetArena() != nullptr);

    return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                        GetArena());
}

inline void client_login::unsafe_arena_set_allocated_username(
        std::string *username) {
            GOOGLE_DCHECK(GetArena() != nullptr);
    if (username != nullptr) {

    } else {

    }
    username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                      username, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client_login.username)
}

// string passwd = 3;
inline void client_login::clear_passwd() {
    passwd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline const std::string &client_login::passwd() const {
    // @@protoc_insertion_point(field_get:client_login.passwd)
    return _internal_passwd();
}

inline void client_login::set_passwd(const std::string &value) {
    _internal_set_passwd(value);
    // @@protoc_insertion_point(field_set:client_login.passwd)
}

inline std::string *client_login::mutable_passwd() {
    // @@protoc_insertion_point(field_mutable:client_login.passwd)
    return _internal_mutable_passwd();
}

inline const std::string &client_login::_internal_passwd() const {
    return passwd_.Get();
}

inline void client_login::_internal_set_passwd(const std::string &value) {

    passwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}

inline void client_login::set_passwd(std::string &&value) {

    passwd_.Set(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:client_login.passwd)
}

inline void client_login::set_passwd(const char *value) {
            GOOGLE_DCHECK(value != nullptr);

    passwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
                GetArena());
    // @@protoc_insertion_point(field_set_char:client_login.passwd)
}

inline void client_login::set_passwd(const char *value,
                                     size_t size) {

    passwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
            reinterpret_cast<const char *>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:client_login.passwd)
}

inline std::string *client_login::_internal_mutable_passwd() {

    return passwd_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline std::string *client_login::release_passwd() {
    // @@protoc_insertion_point(field_release:client_login.passwd)
    return passwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline void client_login::set_allocated_passwd(std::string *passwd) {
    if (passwd != nullptr) {

    } else {

    }
    passwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwd,
                         GetArena());
    // @@protoc_insertion_point(field_set_allocated:client_login.passwd)
}

inline std::string *client_login::unsafe_arena_release_passwd() {
    // @@protoc_insertion_point(field_unsafe_arena_release:client_login.passwd)
            GOOGLE_DCHECK(GetArena() != nullptr);

    return passwd_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                      GetArena());
}

inline void client_login::unsafe_arena_set_allocated_passwd(
        std::string *passwd) {
            GOOGLE_DCHECK(GetArena() != nullptr);
    if (passwd != nullptr) {

    } else {

    }
    passwd_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                    passwd, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client_login.passwd)
}

// -------------------------------------------------------------------

// server_login

// int32 cmd = 1;
inline void server_login::clear_cmd() {
  cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_login::_internal_cmd() const {
  return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_login::cmd() const {
  // @@protoc_insertion_point(field_get:server_login.cmd)
  return _internal_cmd();
}
inline void server_login::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {

    cmd_ = value;
}
inline void server_login::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:server_login.cmd)
}

// int32 isSuccess = 2;
inline void server_login::clear_issuccess() {
    issuccess_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_login::_internal_issuccess() const {
    return issuccess_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_login::issuccess() const {
    // @@protoc_insertion_point(field_get:server_login.isSuccess)
    return _internal_issuccess();
}
inline void server_login::_internal_set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value) {

    issuccess_ = value;
}
inline void server_login::set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_issuccess(value);
    // @@protoc_insertion_point(field_set:server_login.isSuccess)
}

// string message = 3;
inline void server_login::clear_message() {
    message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline const std::string &server_login::message() const {
    // @@protoc_insertion_point(field_get:server_login.message)
    return _internal_message();
}

inline void server_login::set_message(const std::string &value) {
    _internal_set_message(value);
    // @@protoc_insertion_point(field_set:server_login.message)
}

inline std::string *server_login::mutable_message() {
    // @@protoc_insertion_point(field_mutable:server_login.message)
    return _internal_mutable_message();
}

inline const std::string &server_login::_internal_message() const {
    return message_.Get();
}

inline void server_login::_internal_set_message(const std::string &value) {

    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}

inline void server_login::set_message(std::string &&value) {

    message_.Set(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:server_login.message)
}

inline void server_login::set_message(const char *value) {
            GOOGLE_DCHECK(value != nullptr);

    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
                 GetArena());
    // @@protoc_insertion_point(field_set_char:server_login.message)
}

inline void server_login::set_message(const char *value,
                                      size_t size) {

    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
            reinterpret_cast<const char *>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:server_login.message)
}

inline std::string *server_login::_internal_mutable_message() {

    return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline std::string *server_login::release_message() {
    // @@protoc_insertion_point(field_release:server_login.message)
    return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline void server_login::set_allocated_message(std::string *message) {
    if (message != nullptr) {

    } else {

    }
    message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
                          GetArena());
    // @@protoc_insertion_point(field_set_allocated:server_login.message)
}

inline std::string *server_login::unsafe_arena_release_message() {
    // @@protoc_insertion_point(field_unsafe_arena_release:server_login.message)
            GOOGLE_DCHECK(GetArena() != nullptr);

    return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                       GetArena());
}

inline void server_login::unsafe_arena_set_allocated_message(
        std::string *message) {
            GOOGLE_DCHECK(GetArena() != nullptr);
    if (message != nullptr) {

    } else {

    }
    message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                     message, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server_login.message)
}

// -------------------------------------------------------------------

// client_register

// int32 cmd = 1;
inline void client_register::clear_cmd() {
  cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 client_register::_internal_cmd() const {
  return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 client_register::cmd() const {
  // @@protoc_insertion_point(field_get:client_register.cmd)
  return _internal_cmd();
}
inline void client_register::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {

    cmd_ = value;
}
inline void client_register::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:client_register.cmd)
}

// string username = 2;
inline void client_register::clear_username() {
    username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline const std::string &client_register::username() const {
    // @@protoc_insertion_point(field_get:client_register.username)
    return _internal_username();
}

inline void client_register::set_username(const std::string &value) {
    _internal_set_username(value);
    // @@protoc_insertion_point(field_set:client_register.username)
}

inline std::string *client_register::mutable_username() {
    // @@protoc_insertion_point(field_mutable:client_register.username)
    return _internal_mutable_username();
}

inline const std::string &client_register::_internal_username() const {
    return username_.Get();
}

inline void client_register::_internal_set_username(const std::string &value) {

    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}

inline void client_register::set_username(std::string &&value) {

    username_.Set(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:client_register.username)
}

inline void client_register::set_username(const char *value) {
            GOOGLE_DCHECK(value != nullptr);

    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
                  GetArena());
    // @@protoc_insertion_point(field_set_char:client_register.username)
}

inline void client_register::set_username(const char *value,
                                          size_t size) {

    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
            reinterpret_cast<const char *>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:client_register.username)
}

inline std::string *client_register::_internal_mutable_username() {

    return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline std::string *client_register::release_username() {
    // @@protoc_insertion_point(field_release:client_register.username)
    return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline void client_register::set_allocated_username(std::string *username) {
    if (username != nullptr) {

    } else {

    }
    username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
                           GetArena());
    // @@protoc_insertion_point(field_set_allocated:client_register.username)
}

inline std::string *client_register::unsafe_arena_release_username() {
    // @@protoc_insertion_point(field_unsafe_arena_release:client_register.username)
            GOOGLE_DCHECK(GetArena() != nullptr);

    return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                        GetArena());
}

inline void client_register::unsafe_arena_set_allocated_username(
        std::string *username) {
            GOOGLE_DCHECK(GetArena() != nullptr);
    if (username != nullptr) {

    } else {

    }
    username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                      username, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client_register.username)
}

// string passwd = 3;
inline void client_register::clear_passwd() {
    passwd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline const std::string &client_register::passwd() const {
    // @@protoc_insertion_point(field_get:client_register.passwd)
    return _internal_passwd();
}

inline void client_register::set_passwd(const std::string &value) {
    _internal_set_passwd(value);
    // @@protoc_insertion_point(field_set:client_register.passwd)
}

inline std::string *client_register::mutable_passwd() {
    // @@protoc_insertion_point(field_mutable:client_register.passwd)
    return _internal_mutable_passwd();
}

inline const std::string &client_register::_internal_passwd() const {
    return passwd_.Get();
}

inline void client_register::_internal_set_passwd(const std::string &value) {

    passwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}

inline void client_register::set_passwd(std::string &&value) {

    passwd_.Set(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:client_register.passwd)
}

inline void client_register::set_passwd(const char *value) {
            GOOGLE_DCHECK(value != nullptr);

    passwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
                GetArena());
    // @@protoc_insertion_point(field_set_char:client_register.passwd)
}

inline void client_register::set_passwd(const char *value,
                                        size_t size) {

    passwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
            reinterpret_cast<const char *>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:client_register.passwd)
}

inline std::string *client_register::_internal_mutable_passwd() {

    return passwd_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline std::string *client_register::release_passwd() {
    // @@protoc_insertion_point(field_release:client_register.passwd)
    return passwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline void client_register::set_allocated_passwd(std::string *passwd) {
    if (passwd != nullptr) {

    } else {

    }
    passwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwd,
                         GetArena());
    // @@protoc_insertion_point(field_set_allocated:client_register.passwd)
}

inline std::string *client_register::unsafe_arena_release_passwd() {
    // @@protoc_insertion_point(field_unsafe_arena_release:client_register.passwd)
            GOOGLE_DCHECK(GetArena() != nullptr);

    return passwd_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                      GetArena());
}

inline void client_register::unsafe_arena_set_allocated_passwd(
        std::string *passwd) {
            GOOGLE_DCHECK(GetArena() != nullptr);
    if (passwd != nullptr) {

    } else {

    }
    passwd_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                    passwd, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client_register.passwd)
}

// string nicheng = 4;
inline void client_register::clear_nicheng() {
    nicheng_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline const std::string &client_register::nicheng() const {
    // @@protoc_insertion_point(field_get:client_register.nicheng)
    return _internal_nicheng();
}

inline void client_register::set_nicheng(const std::string &value) {
    _internal_set_nicheng(value);
    // @@protoc_insertion_point(field_set:client_register.nicheng)
}

inline std::string *client_register::mutable_nicheng() {
    // @@protoc_insertion_point(field_mutable:client_register.nicheng)
    return _internal_mutable_nicheng();
}

inline const std::string &client_register::_internal_nicheng() const {
    return nicheng_.Get();
}

inline void client_register::_internal_set_nicheng(const std::string &value) {

    nicheng_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}

inline void client_register::set_nicheng(std::string &&value) {

    nicheng_.Set(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:client_register.nicheng)
}

inline void client_register::set_nicheng(const char *value) {
            GOOGLE_DCHECK(value != nullptr);

    nicheng_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
                 GetArena());
    // @@protoc_insertion_point(field_set_char:client_register.nicheng)
}

inline void client_register::set_nicheng(const char *value,
                                         size_t size) {

    nicheng_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
            reinterpret_cast<const char *>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:client_register.nicheng)
}

inline std::string *client_register::_internal_mutable_nicheng() {

    return nicheng_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline std::string *client_register::release_nicheng() {
    // @@protoc_insertion_point(field_release:client_register.nicheng)
    return nicheng_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline void client_register::set_allocated_nicheng(std::string *nicheng) {
    if (nicheng != nullptr) {

    } else {

    }
    nicheng_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nicheng,
                          GetArena());
    // @@protoc_insertion_point(field_set_allocated:client_register.nicheng)
}

inline std::string *client_register::unsafe_arena_release_nicheng() {
    // @@protoc_insertion_point(field_unsafe_arena_release:client_register.nicheng)
            GOOGLE_DCHECK(GetArena() != nullptr);

    return nicheng_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                       GetArena());
}

inline void client_register::unsafe_arena_set_allocated_nicheng(
        std::string *nicheng) {
            GOOGLE_DCHECK(GetArena() != nullptr);
    if (nicheng != nullptr) {

    } else {

    }
    nicheng_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                     nicheng, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client_register.nicheng)
}

// string email = 5;
inline void client_register::clear_email() {
    email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline const std::string &client_register::email() const {
    // @@protoc_insertion_point(field_get:client_register.email)
    return _internal_email();
}

inline void client_register::set_email(const std::string &value) {
    _internal_set_email(value);
    // @@protoc_insertion_point(field_set:client_register.email)
}

inline std::string *client_register::mutable_email() {
    // @@protoc_insertion_point(field_mutable:client_register.email)
    return _internal_mutable_email();
}

inline const std::string &client_register::_internal_email() const {
    return email_.Get();
}

inline void client_register::_internal_set_email(const std::string &value) {

    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}

inline void client_register::set_email(std::string &&value) {

    email_.Set(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:client_register.email)
}

inline void client_register::set_email(const char *value) {
            GOOGLE_DCHECK(value != nullptr);

    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
               GetArena());
    // @@protoc_insertion_point(field_set_char:client_register.email)
}

inline void client_register::set_email(const char *value,
                                       size_t size) {

    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
            reinterpret_cast<const char *>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:client_register.email)
}

inline std::string *client_register::_internal_mutable_email() {

    return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline std::string *client_register::release_email() {
    // @@protoc_insertion_point(field_release:client_register.email)
    return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline void client_register::set_allocated_email(std::string *email) {
    if (email != nullptr) {

    } else {

    }
    email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
                        GetArena());
    // @@protoc_insertion_point(field_set_allocated:client_register.email)
}

inline std::string *client_register::unsafe_arena_release_email() {
    // @@protoc_insertion_point(field_unsafe_arena_release:client_register.email)
            GOOGLE_DCHECK(GetArena() != nullptr);

    return email_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                     GetArena());
}

inline void client_register::unsafe_arena_set_allocated_email(
        std::string *email) {
            GOOGLE_DCHECK(GetArena() != nullptr);
    if (email != nullptr) {

    } else {

    }
    email_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                   email, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client_register.email)
}

// string touxiang = 6;
inline void client_register::clear_touxiang() {
    touxiang_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline const std::string &client_register::touxiang() const {
    // @@protoc_insertion_point(field_get:client_register.touxiang)
    return _internal_touxiang();
}

inline void client_register::set_touxiang(const std::string &value) {
    _internal_set_touxiang(value);
    // @@protoc_insertion_point(field_set:client_register.touxiang)
}

inline std::string *client_register::mutable_touxiang() {
    // @@protoc_insertion_point(field_mutable:client_register.touxiang)
    return _internal_mutable_touxiang();
}

inline const std::string &client_register::_internal_touxiang() const {
    return touxiang_.Get();
}

inline void client_register::_internal_set_touxiang(const std::string &value) {

    touxiang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}

inline void client_register::set_touxiang(std::string &&value) {

    touxiang_.Set(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:client_register.touxiang)
}

inline void client_register::set_touxiang(const char *value) {
            GOOGLE_DCHECK(value != nullptr);

    touxiang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
                  GetArena());
    // @@protoc_insertion_point(field_set_char:client_register.touxiang)
}

inline void client_register::set_touxiang(const char *value,
                                          size_t size) {

    touxiang_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
            reinterpret_cast<const char *>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:client_register.touxiang)
}

inline std::string *client_register::_internal_mutable_touxiang() {

    return touxiang_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline std::string *client_register::release_touxiang() {
    // @@protoc_insertion_point(field_release:client_register.touxiang)
    return touxiang_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline void client_register::set_allocated_touxiang(std::string *touxiang) {
    if (touxiang != nullptr) {

    } else {

    }
    touxiang_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), touxiang,
                           GetArena());
    // @@protoc_insertion_point(field_set_allocated:client_register.touxiang)
}

inline std::string *client_register::unsafe_arena_release_touxiang() {
    // @@protoc_insertion_point(field_unsafe_arena_release:client_register.touxiang)
            GOOGLE_DCHECK(GetArena() != nullptr);

    return touxiang_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                        GetArena());
}

inline void client_register::unsafe_arena_set_allocated_touxiang(
        std::string *touxiang) {
            GOOGLE_DCHECK(GetArena() != nullptr);
    if (touxiang != nullptr) {

    } else {

    }
    touxiang_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                      touxiang, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client_register.touxiang)
}

// -------------------------------------------------------------------

// server_register

// int32 cmd = 1;
inline void server_register::clear_cmd() {
    cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_register::_internal_cmd() const {
  return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_register::cmd() const {
  // @@protoc_insertion_point(field_get:server_register.cmd)
  return _internal_cmd();
}
inline void server_register::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {

    cmd_ = value;
}
inline void server_register::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:server_register.cmd)
}

// int32 isSuccess = 2;
inline void server_register::clear_issuccess() {
  issuccess_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_register::_internal_issuccess() const {
  return issuccess_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_register::issuccess() const {
  // @@protoc_insertion_point(field_get:server_register.isSuccess)
  return _internal_issuccess();
}
inline void server_register::_internal_set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value) {

    issuccess_ = value;
}
inline void server_register::set_issuccess(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_issuccess(value);
  // @@protoc_insertion_point(field_set:server_register.isSuccess)
}

// string message = 3;
inline void server_register::clear_message() {
    message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline const std::string &server_register::message() const {
    // @@protoc_insertion_point(field_get:server_register.message)
    return _internal_message();
}

inline void server_register::set_message(const std::string &value) {
    _internal_set_message(value);
    // @@protoc_insertion_point(field_set:server_register.message)
}

inline std::string *server_register::mutable_message() {
    // @@protoc_insertion_point(field_mutable:server_register.message)
    return _internal_mutable_message();
}

inline const std::string &server_register::_internal_message() const {
    return message_.Get();
}

inline void server_register::_internal_set_message(const std::string &value) {

    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}

inline void server_register::set_message(std::string &&value) {

    message_.Set(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:server_register.message)
}

inline void server_register::set_message(const char *value) {
            GOOGLE_DCHECK(value != nullptr);

    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
                 GetArena());
    // @@protoc_insertion_point(field_set_char:server_register.message)
}

inline void server_register::set_message(const char *value,
                                         size_t size) {

    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
            reinterpret_cast<const char *>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:server_register.message)
}

inline std::string *server_register::_internal_mutable_message() {

    return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline std::string *server_register::release_message() {
    // @@protoc_insertion_point(field_release:server_register.message)
    return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline void server_register::set_allocated_message(std::string *message) {
    if (message != nullptr) {

    } else {

    }
    message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
                          GetArena());
    // @@protoc_insertion_point(field_set_allocated:server_register.message)
}

inline std::string *server_register::unsafe_arena_release_message() {
    // @@protoc_insertion_point(field_unsafe_arena_release:server_register.message)
            GOOGLE_DCHECK(GetArena() != nullptr);

    return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                       GetArena());
}

inline void server_register::unsafe_arena_set_allocated_message(
        std::string *message) {
            GOOGLE_DCHECK(GetArena() != nullptr);
    if (message != nullptr) {

    } else {

    }
    message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                     message, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server_register.message)
}

// -------------------------------------------------------------------

// client_create_game

// int32 cmd = 1;
inline void client_create_game::clear_cmd() {
    cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 client_create_game::_internal_cmd() const {
    return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 client_create_game::cmd() const {
    // @@protoc_insertion_point(field_get:client_create_game.cmd)
    return _internal_cmd();
}
inline void client_create_game::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {

    cmd_ = value;
}
inline void client_create_game::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_cmd(value);
    // @@protoc_insertion_point(field_set:client_create_game.cmd)
}

// string withUsername = 2;
inline void client_create_game::clear_withusername() {
    withusername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline const std::string &client_create_game::withusername() const {
    // @@protoc_insertion_point(field_get:client_create_game.withUsername)
    return _internal_withusername();
}

inline void client_create_game::set_withusername(const std::string &value) {
    _internal_set_withusername(value);
    // @@protoc_insertion_point(field_set:client_create_game.withUsername)
}

inline std::string *client_create_game::mutable_withusername() {
    // @@protoc_insertion_point(field_mutable:client_create_game.withUsername)
    return _internal_mutable_withusername();
}

inline const std::string &client_create_game::_internal_withusername() const {
    return withusername_.Get();
}

inline void client_create_game::_internal_set_withusername(const std::string &value) {

    withusername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}

inline void client_create_game::set_withusername(std::string &&value) {

    withusername_.Set(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:client_create_game.withUsername)
}

inline void client_create_game::set_withusername(const char *value) {
            GOOGLE_DCHECK(value != nullptr);

    withusername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
                      GetArena());
    // @@protoc_insertion_point(field_set_char:client_create_game.withUsername)
}

inline void client_create_game::set_withusername(const char *value,
                                                 size_t size) {

    withusername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
            reinterpret_cast<const char *>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:client_create_game.withUsername)
}

inline std::string *client_create_game::_internal_mutable_withusername() {

    return withusername_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline std::string *client_create_game::release_withusername() {
    // @@protoc_insertion_point(field_release:client_create_game.withUsername)
    return withusername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline void client_create_game::set_allocated_withusername(std::string *withusername) {
    if (withusername != nullptr) {

    } else {

    }
    withusername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), withusername,
                               GetArena());
    // @@protoc_insertion_point(field_set_allocated:client_create_game.withUsername)
}

inline std::string *client_create_game::unsafe_arena_release_withusername() {
    // @@protoc_insertion_point(field_unsafe_arena_release:client_create_game.withUsername)
            GOOGLE_DCHECK(GetArena() != nullptr);

    return withusername_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                            GetArena());
}

inline void client_create_game::unsafe_arena_set_allocated_withusername(
        std::string *withusername) {
            GOOGLE_DCHECK(GetArena() != nullptr);
    if (withusername != nullptr) {

    } else {

    }
    withusername_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                          withusername, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client_create_game.withUsername)
}

// -------------------------------------------------------------------

// server_online_infor

// int32 cmd = 1;
inline void server_online_infor::clear_cmd() {
    cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_online_infor::_internal_cmd() const {
    return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_online_infor::cmd() const {
    // @@protoc_insertion_point(field_get:server_online_infor.cmd)
    return _internal_cmd();
}
inline void server_online_infor::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {

    cmd_ = value;
}
inline void server_online_infor::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_cmd(value);
    // @@protoc_insertion_point(field_set:server_online_infor.cmd)
}

// repeated string people = 2;
inline int server_online_infor::_internal_people_size() const {
    return people_.size();
}
inline int server_online_infor::people_size() const {
    return _internal_people_size();
}

inline void server_online_infor::clear_people() {
    people_.Clear();
}

inline std::string *server_online_infor::add_people() {
    // @@protoc_insertion_point(field_add_mutable:server_online_infor.people)
    return _internal_add_people();
}

inline const std::string &server_online_infor::_internal_people(int index) const {
    return people_.Get(index);
}

inline const std::string &server_online_infor::people(int index) const {
    // @@protoc_insertion_point(field_get:server_online_infor.people)
    return _internal_people(index);
}

inline std::string *server_online_infor::mutable_people(int index) {
    // @@protoc_insertion_point(field_mutable:server_online_infor.people)
    return people_.Mutable(index);
}

inline void server_online_infor::set_people(int index, const std::string &value) {
    // @@protoc_insertion_point(field_set:server_online_infor.people)
    people_.Mutable(index)->assign(value);
}

inline void server_online_infor::set_people(int index, std::string &&value) {
    // @@protoc_insertion_point(field_set:server_online_infor.people)
    people_.Mutable(index)->assign(std::move(value));
}

inline void server_online_infor::set_people(int index, const char *value) {
            GOOGLE_DCHECK(value != nullptr);
    people_.Mutable(index)->assign(value);
    // @@protoc_insertion_point(field_set_char:server_online_infor.people)
}

inline void server_online_infor::set_people(int index, const char *value, size_t size) {
    people_.Mutable(index)->assign(
            reinterpret_cast<const char *>(value), size);
    // @@protoc_insertion_point(field_set_pointer:server_online_infor.people)
}

inline std::string *server_online_infor::_internal_add_people() {
    return people_.Add();
}

inline void server_online_infor::add_people(const std::string &value) {
    people_.Add()->assign(value);
    // @@protoc_insertion_point(field_add:server_online_infor.people)
}

inline void server_online_infor::add_people(std::string &&value) {
    people_.Add(std::move(value));
    // @@protoc_insertion_point(field_add:server_online_infor.people)
}

inline void server_online_infor::add_people(const char *value) {
            GOOGLE_DCHECK(value != nullptr);
    people_.Add()->assign(value);
    // @@protoc_insertion_point(field_add_char:server_online_infor.people)
}

inline void server_online_infor::add_people(const char *value, size_t size) {
    people_.Add()->assign(reinterpret_cast<const char *>(value), size);
    // @@protoc_insertion_point(field_add_pointer:server_online_infor.people)
}

inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> &
server_online_infor::people() const {
    // @@protoc_insertion_point(field_list:server_online_infor.people)
    return people_;
}

inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> *
server_online_infor::mutable_people() {
    // @@protoc_insertion_point(field_mutable_list:server_online_infor.people)
    return &people_;
}

// -------------------------------------------------------------------

// server_game_invite

// int32 cmd = 1;
inline void server_game_invite::clear_cmd() {
    cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_game_invite::_internal_cmd() const {
    return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_game_invite::cmd() const {
    // @@protoc_insertion_point(field_get:server_game_invite.cmd)
    return _internal_cmd();
}
inline void server_game_invite::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {

    cmd_ = value;
}
inline void server_game_invite::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_cmd(value);
    // @@protoc_insertion_point(field_set:server_game_invite.cmd)
}

// string people = 2;
inline void server_game_invite::clear_people() {
    people_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline const std::string &server_game_invite::people() const {
    // @@protoc_insertion_point(field_get:server_game_invite.people)
    return _internal_people();
}

inline void server_game_invite::set_people(const std::string &value) {
    _internal_set_people(value);
    // @@protoc_insertion_point(field_set:server_game_invite.people)
}

inline std::string *server_game_invite::mutable_people() {
    // @@protoc_insertion_point(field_mutable:server_game_invite.people)
    return _internal_mutable_people();
}

inline const std::string &server_game_invite::_internal_people() const {
    return people_.Get();
}

inline void server_game_invite::_internal_set_people(const std::string &value) {

    people_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}

inline void server_game_invite::set_people(std::string &&value) {

    people_.Set(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:server_game_invite.people)
}

inline void server_game_invite::set_people(const char *value) {
            GOOGLE_DCHECK(value != nullptr);

    people_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
                GetArena());
    // @@protoc_insertion_point(field_set_char:server_game_invite.people)
}

inline void server_game_invite::set_people(const char *value,
                                           size_t size) {

    people_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
            reinterpret_cast<const char *>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:server_game_invite.people)
}

inline std::string *server_game_invite::_internal_mutable_people() {

    return people_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline std::string *server_game_invite::release_people() {
    // @@protoc_insertion_point(field_release:server_game_invite.people)
    return people_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline void server_game_invite::set_allocated_people(std::string *people) {
    if (people != nullptr) {

    } else {

    }
    people_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), people,
                         GetArena());
    // @@protoc_insertion_point(field_set_allocated:server_game_invite.people)
}

inline std::string *server_game_invite::unsafe_arena_release_people() {
    // @@protoc_insertion_point(field_unsafe_arena_release:server_game_invite.people)
            GOOGLE_DCHECK(GetArena() != nullptr);

    return people_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                      GetArena());
}

inline void server_game_invite::unsafe_arena_set_allocated_people(
        std::string *people) {
            GOOGLE_DCHECK(GetArena() != nullptr);
    if (people != nullptr) {

    } else {

    }
    people_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                    people, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server_game_invite.people)
}

// -------------------------------------------------------------------

// client_game_invite

// int32 cmd = 1;
inline void client_game_invite::clear_cmd() {
    cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 client_game_invite::_internal_cmd() const {
    return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 client_game_invite::cmd() const {
    // @@protoc_insertion_point(field_get:client_game_invite.cmd)
    return _internal_cmd();
}
inline void client_game_invite::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {

    cmd_ = value;
}
inline void client_game_invite::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_cmd(value);
    // @@protoc_insertion_point(field_set:client_game_invite.cmd)
}

// int32 code = 2;
inline void client_game_invite::clear_code() {
    code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 client_game_invite::_internal_code() const {
    return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 client_game_invite::code() const {
    // @@protoc_insertion_point(field_get:client_game_invite.code)
    return _internal_code();
}
inline void client_game_invite::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {

    code_ = value;
}
inline void client_game_invite::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_code(value);
    // @@protoc_insertion_point(field_set:client_game_invite.code)
}

// -------------------------------------------------------------------

// server_game_isInvite

// int32 cmd = 1;
inline void server_game_isInvite::clear_cmd() {
    cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_game_isInvite::_internal_cmd() const {
    return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_game_isInvite::cmd() const {
    // @@protoc_insertion_point(field_get:server_game_isInvite.cmd)
    return _internal_cmd();
}
inline void server_game_isInvite::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {

    cmd_ = value;
}
inline void server_game_isInvite::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_cmd(value);
    // @@protoc_insertion_point(field_set:server_game_isInvite.cmd)
}

// int32 code = 2;
inline void server_game_isInvite::clear_code() {
    code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_game_isInvite::_internal_code() const {
    return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_game_isInvite::code() const {
    // @@protoc_insertion_point(field_get:server_game_isInvite.code)
    return _internal_code();
}
inline void server_game_isInvite::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {

    code_ = value;
}
inline void server_game_isInvite::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_code(value);
    // @@protoc_insertion_point(field_set:server_game_isInvite.code)
}

// -------------------------------------------------------------------

// test

// int32 cmd = 1;
inline void test::clear_cmd() {
    cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 test::_internal_cmd() const {
  return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 test::cmd() const {
  // @@protoc_insertion_point(field_get:test.cmd)
  return _internal_cmd();
}
inline void test::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {

    cmd_ = value;
}
inline void test::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:test.cmd)
}

// string inform = 2;
inline void test::clear_inform() {
    inform_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline const std::string &test::inform() const {
    // @@protoc_insertion_point(field_get:test.inform)
    return _internal_inform();
}

inline void test::set_inform(const std::string &value) {
    _internal_set_inform(value);
    // @@protoc_insertion_point(field_set:test.inform)
}

inline std::string *test::mutable_inform() {
    // @@protoc_insertion_point(field_mutable:test.inform)
    return _internal_mutable_inform();
}

inline const std::string &test::_internal_inform() const {
    return inform_.Get();
}

inline void test::_internal_set_inform(const std::string &value) {

    inform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}

inline void test::set_inform(std::string &&value) {

    inform_.Set(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:test.inform)
}

inline void test::set_inform(const char *value) {
            GOOGLE_DCHECK(value != nullptr);

    inform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
                GetArena());
    // @@protoc_insertion_point(field_set_char:test.inform)
}

inline void test::set_inform(const char *value,
                             size_t size) {

    inform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
            reinterpret_cast<const char *>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:test.inform)
}

inline std::string *test::_internal_mutable_inform() {

    return inform_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline std::string *test::release_inform() {
    // @@protoc_insertion_point(field_release:test.inform)
    return inform_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline void test::set_allocated_inform(std::string *inform) {
    if (inform != nullptr) {

    } else {

    }
    inform_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inform,
                         GetArena());
    // @@protoc_insertion_point(field_set_allocated:test.inform)
}

inline std::string *test::unsafe_arena_release_inform() {
    // @@protoc_insertion_point(field_unsafe_arena_release:test.inform)
            GOOGLE_DCHECK(GetArena() != nullptr);

    return inform_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                      GetArena());
}

inline void test::unsafe_arena_set_allocated_inform(
        std::string *inform) {
            GOOGLE_DCHECK(GetArena() != nullptr);
    if (inform != nullptr) {

    } else {

    }
    inform_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                    inform, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test.inform)
}

// -------------------------------------------------------------------

// chatMessage

// int32 cmd = 1;
inline void chatMessage::clear_cmd() {
    cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 chatMessage::_internal_cmd() const {
    return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 chatMessage::cmd() const {
    // @@protoc_insertion_point(field_get:chatMessage.cmd)
    return _internal_cmd();
}
inline void chatMessage::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {

    cmd_ = value;
}
inline void chatMessage::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_cmd(value);
    // @@protoc_insertion_point(field_set:chatMessage.cmd)
}

// string data = 2;
inline void chatMessage::clear_data() {
    data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline const std::string &chatMessage::data() const {
    // @@protoc_insertion_point(field_get:chatMessage.data)
    return _internal_data();
}

inline void chatMessage::set_data(const std::string &value) {
    _internal_set_data(value);
    // @@protoc_insertion_point(field_set:chatMessage.data)
}

inline std::string *chatMessage::mutable_data() {
    // @@protoc_insertion_point(field_mutable:chatMessage.data)
    return _internal_mutable_data();
}

inline const std::string &chatMessage::_internal_data() const {
    return data_.Get();
}

inline void chatMessage::_internal_set_data(const std::string &value) {

    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}

inline void chatMessage::set_data(std::string &&value) {

    data_.Set(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:chatMessage.data)
}

inline void chatMessage::set_data(const char *value) {
            GOOGLE_DCHECK(value != nullptr);

    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
    // @@protoc_insertion_point(field_set_char:chatMessage.data)
}

inline void chatMessage::set_data(const char *value,
                                  size_t size) {

    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
            reinterpret_cast<const char *>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:chatMessage.data)
}

inline std::string *chatMessage::_internal_mutable_data() {

    return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline std::string *chatMessage::release_data() {
    // @@protoc_insertion_point(field_release:chatMessage.data)
    return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline void chatMessage::set_allocated_data(std::string *data) {
    if (data != nullptr) {

    } else {

    }
    data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
                       GetArena());
    // @@protoc_insertion_point(field_set_allocated:chatMessage.data)
}

inline std::string *chatMessage::unsafe_arena_release_data() {
    // @@protoc_insertion_point(field_unsafe_arena_release:chatMessage.data)
            GOOGLE_DCHECK(GetArena() != nullptr);

    return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                    GetArena());
}

inline void chatMessage::unsafe_arena_set_allocated_data(
        std::string *data) {
            GOOGLE_DCHECK(GetArena() != nullptr);
    if (data != nullptr) {

    } else {

    }
    data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                  data, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chatMessage.data)
}

// string time = 3;
inline void chatMessage::clear_time() {
    time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline const std::string &chatMessage::time() const {
    // @@protoc_insertion_point(field_get:chatMessage.time)
    return _internal_time();
}

inline void chatMessage::set_time(const std::string &value) {
    _internal_set_time(value);
    // @@protoc_insertion_point(field_set:chatMessage.time)
}

inline std::string *chatMessage::mutable_time() {
    // @@protoc_insertion_point(field_mutable:chatMessage.time)
    return _internal_mutable_time();
}

inline const std::string &chatMessage::_internal_time() const {
    return time_.Get();
}

inline void chatMessage::_internal_set_time(const std::string &value) {

    time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}

inline void chatMessage::set_time(std::string &&value) {

    time_.Set(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:chatMessage.time)
}

inline void chatMessage::set_time(const char *value) {
            GOOGLE_DCHECK(value != nullptr);

    time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
    // @@protoc_insertion_point(field_set_char:chatMessage.time)
}

inline void chatMessage::set_time(const char *value,
                                  size_t size) {

    time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
            reinterpret_cast<const char *>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:chatMessage.time)
}

inline std::string *chatMessage::_internal_mutable_time() {

    return time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline std::string *chatMessage::release_time() {
    // @@protoc_insertion_point(field_release:chatMessage.time)
    return time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline void chatMessage::set_allocated_time(std::string *time) {
    if (time != nullptr) {

    } else {

    }
    time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
                       GetArena());
    // @@protoc_insertion_point(field_set_allocated:chatMessage.time)
}

inline std::string *chatMessage::unsafe_arena_release_time() {
    // @@protoc_insertion_point(field_unsafe_arena_release:chatMessage.time)
            GOOGLE_DCHECK(GetArena() != nullptr);

    return time_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                    GetArena());
}

inline void chatMessage::unsafe_arena_set_allocated_time(
        std::string *time) {
            GOOGLE_DCHECK(GetArena() != nullptr);
    if (time != nullptr) {

    } else {

    }
    time_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                  time, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chatMessage.time)
}

// int32 type = 4;
inline void chatMessage::clear_type() {
    type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 chatMessage::_internal_type() const {
    return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 chatMessage::type() const {
    // @@protoc_insertion_point(field_get:chatMessage.type)
    return _internal_type();
}
inline void chatMessage::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {

    type_ = value;
}
inline void chatMessage::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_type(value);
    // @@protoc_insertion_point(field_set:chatMessage.type)
}

// -------------------------------------------------------------------

// server_user_infor

// int32 cmd = 1;
inline void server_user_infor::clear_cmd() {
    cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_user_infor::_internal_cmd() const {
    return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_user_infor::cmd() const {
    // @@protoc_insertion_point(field_get:server_user_infor.cmd)
    return _internal_cmd();
}
inline void server_user_infor::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {

    cmd_ = value;
}
inline void server_user_infor::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_cmd(value);
    // @@protoc_insertion_point(field_set:server_user_infor.cmd)
}

// string name = 2;
inline void server_user_infor::clear_name() {
    name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline const std::string &server_user_infor::name() const {
    // @@protoc_insertion_point(field_get:server_user_infor.name)
    return _internal_name();
}

inline void server_user_infor::set_name(const std::string &value) {
    _internal_set_name(value);
    // @@protoc_insertion_point(field_set:server_user_infor.name)
}

inline std::string *server_user_infor::mutable_name() {
    // @@protoc_insertion_point(field_mutable:server_user_infor.name)
    return _internal_mutable_name();
}

inline const std::string &server_user_infor::_internal_name() const {
    return name_.Get();
}

inline void server_user_infor::_internal_set_name(const std::string &value) {

    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}

inline void server_user_infor::set_name(std::string &&value) {

    name_.Set(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:server_user_infor.name)
}

inline void server_user_infor::set_name(const char *value) {
            GOOGLE_DCHECK(value != nullptr);

    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
    // @@protoc_insertion_point(field_set_char:server_user_infor.name)
}

inline void server_user_infor::set_name(const char *value,
                                        size_t size) {

    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
            reinterpret_cast<const char *>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:server_user_infor.name)
}

inline std::string *server_user_infor::_internal_mutable_name() {

    return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline std::string *server_user_infor::release_name() {
    // @@protoc_insertion_point(field_release:server_user_infor.name)
    return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline void server_user_infor::set_allocated_name(std::string *name) {
    if (name != nullptr) {

    } else {

    }
    name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
                       GetArena());
    // @@protoc_insertion_point(field_set_allocated:server_user_infor.name)
}

inline std::string *server_user_infor::unsafe_arena_release_name() {
    // @@protoc_insertion_point(field_unsafe_arena_release:server_user_infor.name)
            GOOGLE_DCHECK(GetArena() != nullptr);

    return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                    GetArena());
}

inline void server_user_infor::unsafe_arena_set_allocated_name(
        std::string *name) {
            GOOGLE_DCHECK(GetArena() != nullptr);
    if (name != nullptr) {

    } else {

    }
    name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                  name, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server_user_infor.name)
}

// int32 integral = 3;
inline void server_user_infor::clear_integral() {
    integral_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_user_infor::_internal_integral() const {
    return integral_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_user_infor::integral() const {
    // @@protoc_insertion_point(field_get:server_user_infor.integral)
    return _internal_integral();
}
inline void server_user_infor::_internal_set_integral(::PROTOBUF_NAMESPACE_ID::int32 value) {

    integral_ = value;
}
inline void server_user_infor::set_integral(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_integral(value);
    // @@protoc_insertion_point(field_set:server_user_infor.integral)
}

// int32 level = 4;
inline void server_user_infor::clear_level() {
    level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_user_infor::_internal_level() const {
    return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_user_infor::level() const {
    // @@protoc_insertion_point(field_get:server_user_infor.level)
    return _internal_level();
}
inline void server_user_infor::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {

    level_ = value;
}
inline void server_user_infor::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_level(value);
    // @@protoc_insertion_point(field_set:server_user_infor.level)
}

// int32 numsGame = 5;
inline void server_user_infor::clear_numsgame() {
    numsgame_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_user_infor::_internal_numsgame() const {
    return numsgame_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_user_infor::numsgame() const {
    // @@protoc_insertion_point(field_get:server_user_infor.numsGame)
    return _internal_numsgame();
}
inline void server_user_infor::_internal_set_numsgame(::PROTOBUF_NAMESPACE_ID::int32 value) {

    numsgame_ = value;
}
inline void server_user_infor::set_numsgame(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_numsgame(value);
    // @@protoc_insertion_point(field_set:server_user_infor.numsGame)
}

// int32 win = 6;
inline void server_user_infor::clear_win() {
    win_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_user_infor::_internal_win() const {
    return win_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_user_infor::win() const {
    // @@protoc_insertion_point(field_get:server_user_infor.win)
    return _internal_win();
}
inline void server_user_infor::_internal_set_win(::PROTOBUF_NAMESPACE_ID::int32 value) {

    win_ = value;
}
inline void server_user_infor::set_win(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_win(value);
    // @@protoc_insertion_point(field_set:server_user_infor.win)
}

// int32 lose = 7;
inline void server_user_infor::clear_lose() {
    lose_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_user_infor::_internal_lose() const {
    return lose_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_user_infor::lose() const {
    // @@protoc_insertion_point(field_get:server_user_infor.lose)
    return _internal_lose();
}
inline void server_user_infor::_internal_set_lose(::PROTOBUF_NAMESPACE_ID::int32 value) {

    lose_ = value;
}
inline void server_user_infor::set_lose(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_lose(value);
    // @@protoc_insertion_point(field_set:server_user_infor.lose)
}

// int32 draw = 8;
inline void server_user_infor::clear_draw() {
    draw_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_user_infor::_internal_draw() const {
    return draw_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_user_infor::draw() const {
    // @@protoc_insertion_point(field_get:server_user_infor.draw)
    return _internal_draw();
}
inline void server_user_infor::_internal_set_draw(::PROTOBUF_NAMESPACE_ID::int32 value) {

    draw_ = value;
}
inline void server_user_infor::set_draw(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_draw(value);
    // @@protoc_insertion_point(field_set:server_user_infor.draw)
}

// int32 gameCurrency = 9;
inline void server_user_infor::clear_gamecurrency() {
    gamecurrency_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_user_infor::_internal_gamecurrency() const {
    return gamecurrency_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_user_infor::gamecurrency() const {
    // @@protoc_insertion_point(field_get:server_user_infor.gameCurrency)
    return _internal_gamecurrency();
}
inline void server_user_infor::_internal_set_gamecurrency(::PROTOBUF_NAMESPACE_ID::int32 value) {

    gamecurrency_ = value;
}
inline void server_user_infor::set_gamecurrency(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_gamecurrency(value);
    // @@protoc_insertion_point(field_set:server_user_infor.gameCurrency)
}

// string avatar = 10;
inline void server_user_infor::clear_avatar() {
    avatar_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline const std::string &server_user_infor::avatar() const {
    // @@protoc_insertion_point(field_get:server_user_infor.avatar)
    return _internal_avatar();
}

inline void server_user_infor::set_avatar(const std::string &value) {
    _internal_set_avatar(value);
    // @@protoc_insertion_point(field_set:server_user_infor.avatar)
}

inline std::string *server_user_infor::mutable_avatar() {
    // @@protoc_insertion_point(field_mutable:server_user_infor.avatar)
    return _internal_mutable_avatar();
}

inline const std::string &server_user_infor::_internal_avatar() const {
    return avatar_.Get();
}

inline void server_user_infor::_internal_set_avatar(const std::string &value) {

    avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}

inline void server_user_infor::set_avatar(std::string &&value) {

    avatar_.Set(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:server_user_infor.avatar)
}

inline void server_user_infor::set_avatar(const char *value) {
            GOOGLE_DCHECK(value != nullptr);

    avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
                GetArena());
    // @@protoc_insertion_point(field_set_char:server_user_infor.avatar)
}

inline void server_user_infor::set_avatar(const char *value,
                                          size_t size) {

    avatar_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
            reinterpret_cast<const char *>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:server_user_infor.avatar)
}

inline std::string *server_user_infor::_internal_mutable_avatar() {

    return avatar_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline std::string *server_user_infor::release_avatar() {
    // @@protoc_insertion_point(field_release:server_user_infor.avatar)
    return avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline void server_user_infor::set_allocated_avatar(std::string *avatar) {
    if (avatar != nullptr) {

    } else {

    }
    avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar,
                         GetArena());
    // @@protoc_insertion_point(field_set_allocated:server_user_infor.avatar)
}

inline std::string *server_user_infor::unsafe_arena_release_avatar() {
    // @@protoc_insertion_point(field_unsafe_arena_release:server_user_infor.avatar)
            GOOGLE_DCHECK(GetArena() != nullptr);

    return avatar_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                      GetArena());
}

inline void server_user_infor::unsafe_arena_set_allocated_avatar(
        std::string *avatar) {
            GOOGLE_DCHECK(GetArena() != nullptr);
    if (avatar != nullptr) {

    } else {

    }
    avatar_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                    avatar, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server_user_infor.avatar)
}

// int32 code = 11;
inline void server_user_infor::clear_code() {
    code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_user_infor::_internal_code() const {
    return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 server_user_infor::code() const {
    // @@protoc_insertion_point(field_get:server_user_infor.code)
    return _internal_code();
}
inline void server_user_infor::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {

    code_ = value;
}
inline void server_user_infor::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_code(value);
    // @@protoc_insertion_point(field_set:server_user_infor.code)
}

// -------------------------------------------------------------------

// whoWin

// int32 cmd = 1;
inline void whoWin::clear_cmd() {
    cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 whoWin::_internal_cmd() const {
    return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 whoWin::cmd() const {
    // @@protoc_insertion_point(field_get:whoWin.cmd)
    return _internal_cmd();
}
inline void whoWin::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {

    cmd_ = value;
}
inline void whoWin::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_cmd(value);
    // @@protoc_insertion_point(field_set:whoWin.cmd)
}

// int32 code = 2;
inline void whoWin::clear_code() {
    code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 whoWin::_internal_code() const {
    return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 whoWin::code() const {
    // @@protoc_insertion_point(field_get:whoWin.code)
    return _internal_code();
}
inline void whoWin::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {

    code_ = value;
}
inline void whoWin::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_code(value);
    // @@protoc_insertion_point(field_set:whoWin.code)
}

// string win = 3;
inline void whoWin::clear_win() {
    win_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline const std::string &whoWin::win() const {
    // @@protoc_insertion_point(field_get:whoWin.win)
    return _internal_win();
}

inline void whoWin::set_win(const std::string &value) {
    _internal_set_win(value);
    // @@protoc_insertion_point(field_set:whoWin.win)
}

inline std::string *whoWin::mutable_win() {
    // @@protoc_insertion_point(field_mutable:whoWin.win)
    return _internal_mutable_win();
}

inline const std::string &whoWin::_internal_win() const {
    return win_.Get();
}

inline void whoWin::_internal_set_win(const std::string &value) {

    win_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}

inline void whoWin::set_win(std::string &&value) {

    win_.Set(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:whoWin.win)
}

inline void whoWin::set_win(const char *value) {
            GOOGLE_DCHECK(value != nullptr);

    win_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
             GetArena());
    // @@protoc_insertion_point(field_set_char:whoWin.win)
}

inline void whoWin::set_win(const char *value,
                            size_t size) {

    win_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
            reinterpret_cast<const char *>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:whoWin.win)
}

inline std::string *whoWin::_internal_mutable_win() {

    return win_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline std::string *whoWin::release_win() {
    // @@protoc_insertion_point(field_release:whoWin.win)
    return win_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline void whoWin::set_allocated_win(std::string *win) {
    if (win != nullptr) {

    } else {

    }
    win_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), win,
                      GetArena());
    // @@protoc_insertion_point(field_set_allocated:whoWin.win)
}

inline std::string *whoWin::unsafe_arena_release_win() {
    // @@protoc_insertion_point(field_unsafe_arena_release:whoWin.win)
            GOOGLE_DCHECK(GetArena() != nullptr);

    return win_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                   GetArena());
}

inline void whoWin::unsafe_arena_set_allocated_win(
        std::string *win) {
            GOOGLE_DCHECK(GetArena() != nullptr);
    if (win != nullptr) {

    } else {

    }
    win_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                 win, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:whoWin.win)
}

// -------------------------------------------------------------------

// withDraw

// int32 cmd = 1;
inline void withDraw::clear_cmd() {
    cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 withDraw::_internal_cmd() const {
    return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 withDraw::cmd() const {
    // @@protoc_insertion_point(field_get:withDraw.cmd)
    return _internal_cmd();
}
inline void withDraw::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {

    cmd_ = value;
}
inline void withDraw::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_cmd(value);
    // @@protoc_insertion_point(field_set:withDraw.cmd)
}

// int32 nums = 2;
inline void withDraw::clear_nums() {
    nums_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 withDraw::_internal_nums() const {
    return nums_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 withDraw::nums() const {
    // @@protoc_insertion_point(field_get:withDraw.nums)
    return _internal_nums();
}

inline void withDraw::_internal_set_nums(::PROTOBUF_NAMESPACE_ID::int32 value) {

    nums_ = value;
}

inline void withDraw::set_nums(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_nums(value);
    // @@protoc_insertion_point(field_set:withDraw.nums)
}

// -------------------------------------------------------------------

// requestResources

// int32 cmd = 1;
inline void requestResources::clear_cmd() {
    cmd_ = 0;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 requestResources::_internal_cmd() const {
    return cmd_;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 requestResources::cmd() const {
    // @@protoc_insertion_point(field_get:requestResources.cmd)
    return _internal_cmd();
}

inline void requestResources::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {

    cmd_ = value;
}

inline void requestResources::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_cmd(value);
    // @@protoc_insertion_point(field_set:requestResources.cmd)
}

// int32 code = 2;
inline void requestResources::clear_code() {
    code_ = 0;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 requestResources::_internal_code() const {
    return code_;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 requestResources::code() const {
    // @@protoc_insertion_point(field_get:requestResources.code)
    return _internal_code();
}

inline void requestResources::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {

    code_ = value;
}

inline void requestResources::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_code(value);
    // @@protoc_insertion_point(field_set:requestResources.code)
}

// -------------------------------------------------------------------

// responseResources

// int32 cmd = 1;
inline void responseResources::clear_cmd() {
    cmd_ = 0;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 responseResources::_internal_cmd() const {
    return cmd_;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 responseResources::cmd() const {
    // @@protoc_insertion_point(field_get:responseResources.cmd)
    return _internal_cmd();
}

inline void responseResources::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {

    cmd_ = value;
}

inline void responseResources::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_cmd(value);
    // @@protoc_insertion_point(field_set:responseResources.cmd)
}

// int32 code = 2;
inline void responseResources::clear_code() {
    code_ = 0;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 responseResources::_internal_code() const {
    return code_;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 responseResources::code() const {
    // @@protoc_insertion_point(field_get:responseResources.code)
    return _internal_code();
}

inline void responseResources::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {

    code_ = value;
}

inline void responseResources::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_code(value);
    // @@protoc_insertion_point(field_set:responseResources.code)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_base_2eproto
