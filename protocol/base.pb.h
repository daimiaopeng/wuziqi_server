// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_base_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_base_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>

#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

#define PROTOBUF_INTERNAL_EXPORT_base_2eproto
PROTOBUF_NAMESPACE_OPEN
        namespace internal {
            class AnyMetadata;
        }  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_base_2eproto {
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
    static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
    static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_2eproto;

class client_gobang_position;

class client_gobang_positionDefaultTypeInternal;

extern client_gobang_positionDefaultTypeInternal _client_gobang_position_default_instance_;

class client_login;

class client_loginDefaultTypeInternal;

extern client_loginDefaultTypeInternal _client_login_default_instance_;

class cmd;

class cmdDefaultTypeInternal;

extern cmdDefaultTypeInternal _cmd_default_instance_;

class server_gobang_position;

class server_gobang_positionDefaultTypeInternal;

extern server_gobang_positionDefaultTypeInternal _server_gobang_position_default_instance_;

class server_login;

class server_loginDefaultTypeInternal;

extern server_loginDefaultTypeInternal _server_login_default_instance_;

class test;

class testDefaultTypeInternal;

extern testDefaultTypeInternal _test_default_instance_;
PROTOBUF_NAMESPACE_OPEN
        template<>
        ::client_gobang_position *Arena::CreateMaybeMessage<::client_gobang_position>(Arena *);

        template<>
        ::client_login *Arena::CreateMaybeMessage<::client_login>(Arena *);

        template<>
        ::cmd *Arena::CreateMaybeMessage<::cmd>(Arena *);

        template<>
        ::server_gobang_position *Arena::CreateMaybeMessage<::server_gobang_position>(Arena *);

        template<>
        ::server_login *Arena::CreateMaybeMessage<::server_login>(Arena *);

        template<>
        ::test *Arena::CreateMaybeMessage<::test>(Arena *);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class cmd PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cmd) */ {
public:
    inline cmd() : cmd(nullptr) {};

    virtual ~cmd();

    cmd(const cmd &from);

    cmd(cmd &&from) noexcept
            : cmd() {
        *this = ::std::move(from);
    }

    inline cmd &operator=(const cmd &from) {
        CopyFrom(from);
        return *this;
    }

    inline cmd &operator=(cmd &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const cmd &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const cmd *internal_default_instance() {
        return reinterpret_cast<const cmd *>(
                &_cmd_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            0;

    friend void swap(cmd &a, cmd &b) {
        a.Swap(&b);
    }

    inline void Swap(cmd *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(cmd *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline cmd *New() const final {
        return CreateMaybeMessage<cmd>(nullptr);
    }

    cmd *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<cmd>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const cmd &from);

    void MergeFrom(const cmd &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(cmd *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "cmd";
    }

protected:
    explicit cmd(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kCFieldNumber = 1,
    };

    // int32 c = 1;
    void clear_c();

    ::PROTOBUF_NAMESPACE_ID::int32 c() const;

    void set_c(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_c() const;

    void _internal_set_c(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:cmd)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 c_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class client_gobang_position PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client_gobang_position) */ {
public:
    inline client_gobang_position() : client_gobang_position(nullptr) {};

    virtual ~client_gobang_position();

    client_gobang_position(const client_gobang_position &from);

    client_gobang_position(client_gobang_position &&from) noexcept
            : client_gobang_position() {
        *this = ::std::move(from);
    }

    inline client_gobang_position &operator=(const client_gobang_position &from) {
        CopyFrom(from);
        return *this;
    }

    inline client_gobang_position &operator=(client_gobang_position &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const client_gobang_position &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const client_gobang_position *internal_default_instance() {
        return reinterpret_cast<const client_gobang_position *>(
                &_client_gobang_position_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            1;

    friend void swap(client_gobang_position &a, client_gobang_position &b) {
        a.Swap(&b);
    }

    inline void Swap(client_gobang_position *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(client_gobang_position *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline client_gobang_position *New() const final {
        return CreateMaybeMessage<client_gobang_position>(nullptr);
    }

    client_gobang_position *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<client_gobang_position>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const client_gobang_position &from);

    void MergeFrom(const client_gobang_position &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(client_gobang_position *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "client_gobang_position";
    }

protected:
    explicit client_gobang_position(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kCmdFieldNumber = 1,
        kXFieldNumber = 2,
        kYFieldNumber = 3,
    };

    // int32 cmd = 1;
    void clear_cmd();

    ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;

    void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;

    void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 x = 2;
    void clear_x();

    ::PROTOBUF_NAMESPACE_ID::int32 x() const;

    void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;

    void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 y = 3;
    void clear_y();

    ::PROTOBUF_NAMESPACE_ID::int32 y() const;

    void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;

    void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:client_gobang_position)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
    ::PROTOBUF_NAMESPACE_ID::int32 x_;
    ::PROTOBUF_NAMESPACE_ID::int32 y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class server_gobang_position PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_gobang_position) */ {
public:
    inline server_gobang_position() : server_gobang_position(nullptr) {};

    virtual ~server_gobang_position();

    server_gobang_position(const server_gobang_position &from);

    server_gobang_position(server_gobang_position &&from) noexcept
            : server_gobang_position() {
        *this = ::std::move(from);
    }

    inline server_gobang_position &operator=(const server_gobang_position &from) {
        CopyFrom(from);
        return *this;
    }

    inline server_gobang_position &operator=(server_gobang_position &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const server_gobang_position &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const server_gobang_position *internal_default_instance() {
        return reinterpret_cast<const server_gobang_position *>(
                &_server_gobang_position_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            2;

    friend void swap(server_gobang_position &a, server_gobang_position &b) {
        a.Swap(&b);
    }

    inline void Swap(server_gobang_position *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(server_gobang_position *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline server_gobang_position *New() const final {
        return CreateMaybeMessage<server_gobang_position>(nullptr);
    }

    server_gobang_position *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<server_gobang_position>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const server_gobang_position &from);

    void MergeFrom(const server_gobang_position &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(server_gobang_position *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "server_gobang_position";
    }

protected:
    explicit server_gobang_position(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kCmdFieldNumber = 1,
        kXFieldNumber = 2,
        kYFieldNumber = 3,
    };

    // int32 cmd = 1;
    void clear_cmd();

    ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;

    void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;

    void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 x = 2;
    void clear_x();

    ::PROTOBUF_NAMESPACE_ID::int32 x() const;

    void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;

    void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // int32 y = 3;
    void clear_y();

    ::PROTOBUF_NAMESPACE_ID::int32 y() const;

    void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;

    void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:server_gobang_position)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
    ::PROTOBUF_NAMESPACE_ID::int32 x_;
    ::PROTOBUF_NAMESPACE_ID::int32 y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class client_login PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:client_login) */ {
public:
    inline client_login() : client_login(nullptr) {};

    virtual ~client_login();

    client_login(const client_login &from);

    client_login(client_login &&from) noexcept
            : client_login() {
        *this = ::std::move(from);
    }

    inline client_login &operator=(const client_login &from) {
        CopyFrom(from);
        return *this;
    }

    inline client_login &operator=(client_login &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const client_login &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const client_login *internal_default_instance() {
        return reinterpret_cast<const client_login *>(
                &_client_login_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            3;

    friend void swap(client_login &a, client_login &b) {
        a.Swap(&b);
    }

    inline void Swap(client_login *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(client_login *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline client_login *New() const final {
        return CreateMaybeMessage<client_login>(nullptr);
    }

    client_login *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<client_login>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const client_login &from);

    void MergeFrom(const client_login &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(client_login *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "client_login";
    }

protected:
    explicit client_login(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kUsernameFieldNumber = 2,
        kPasswdFieldNumber = 3,
        kCmdFieldNumber = 1,
    };

    // string username = 2;
    void clear_username();

    const std::string &username() const;

    void set_username(const std::string &value);

    void set_username(std::string &&value);

    void set_username(const char *value);

    void set_username(const char *value, size_t size);

    std::string *mutable_username();

    std::string *release_username();

    void set_allocated_username(std::string *username);

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string *unsafe_arena_release_username();

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_username(
            std::string *username);

private:
    const std::string &_internal_username() const;

    void _internal_set_username(const std::string &value);

    std::string *_internal_mutable_username();

public:

    // string passwd = 3;
    void clear_passwd();

    const std::string &passwd() const;

    void set_passwd(const std::string &value);

    void set_passwd(std::string &&value);

    void set_passwd(const char *value);

    void set_passwd(const char *value, size_t size);

    std::string *mutable_passwd();

    std::string *release_passwd();

    void set_allocated_passwd(std::string *passwd);

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string *unsafe_arena_release_passwd();

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_passwd(
            std::string *passwd);

private:
    const std::string &_internal_passwd() const;

    void _internal_set_passwd(const std::string &value);

    std::string *_internal_mutable_passwd();

public:

    // int32 cmd = 1;
    void clear_cmd();

    ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;

    void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;

    void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:client_login)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr passwd_;
    ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class server_login PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_login) */ {
public:
    inline server_login() : server_login(nullptr) {};

    virtual ~server_login();

    server_login(const server_login &from);

    server_login(server_login &&from) noexcept
            : server_login() {
        *this = ::std::move(from);
    }

    inline server_login &operator=(const server_login &from) {
        CopyFrom(from);
        return *this;
    }

    inline server_login &operator=(server_login &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const server_login &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const server_login *internal_default_instance() {
        return reinterpret_cast<const server_login *>(
                &_server_login_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            4;

    friend void swap(server_login &a, server_login &b) {
        a.Swap(&b);
    }

    inline void Swap(server_login *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(server_login *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline server_login *New() const final {
        return CreateMaybeMessage<server_login>(nullptr);
    }

    server_login *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<server_login>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const server_login &from);

    void MergeFrom(const server_login &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(server_login *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "server_login";
    }

protected:
    explicit server_login(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kTokenFieldNumber = 2,
        kCmdFieldNumber = 1,
    };

    // string token = 2;
    void clear_token();

    const std::string &token() const;

    void set_token(const std::string &value);

    void set_token(std::string &&value);

    void set_token(const char *value);

    void set_token(const char *value, size_t size);

    std::string *mutable_token();

    std::string *release_token();

    void set_allocated_token(std::string *token);

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string *unsafe_arena_release_token();

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_token(
            std::string *token);

private:
    const std::string &_internal_token() const;

    void _internal_set_token(const std::string &value);

    std::string *_internal_mutable_token();

public:

    // int32 cmd = 1;
    void clear_cmd();

    ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;

    void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;

    void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:server_login)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class test PROTOBUF_FINAL :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test) */ {
public:
    inline test() : test(nullptr) {};

    virtual ~test();

    test(const test &from);

    test(test &&from) noexcept
            : test() {
        *this = ::std::move(from);
    }

    inline test &operator=(const test &from) {
        CopyFrom(from);
        return *this;
    }

    inline test &operator=(test &&from) noexcept {
        if (GetArena() == from.GetArena()) {
            if (this != &from) InternalSwap(&from);
        } else {
            CopyFrom(from);
        }
        return *this;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
        return GetDescriptor();
    }

    static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
        return GetMetadataStatic().descriptor;
    }

    static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
        return GetMetadataStatic().reflection;
    }

    static const test &default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const test *internal_default_instance() {
        return reinterpret_cast<const test *>(
                &_test_default_instance_);
    }

    static constexpr int kIndexInFileMessages =
            5;

    friend void swap(test &a, test &b) {
        a.Swap(&b);
    }

    inline void Swap(test *other) {
        if (other == this) return;
        if (GetArena() == other->GetArena()) {
            InternalSwap(other);
        } else {
            ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
        }
    }

    void UnsafeArenaSwap(test *other) {
        if (other == this) return;
                GOOGLE_DCHECK(GetArena() == other->GetArena());
        InternalSwap(other);
    }

    // implements Message ----------------------------------------------

    inline test *New() const final {
        return CreateMaybeMessage<test>(nullptr);
    }

    test *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
        return CreateMaybeMessage<test>(arena);
    }

    void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;

    void CopyFrom(const test &from);

    void MergeFrom(const test &from);

    PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;

    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;

    const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;

    ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
            ::PROTOBUF_NAMESPACE_ID::uint8 *target,
            ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;

    int GetCachedSize() const final { return _cached_size_.Get(); }

private:
    inline void SharedCtor();

    inline void SharedDtor();

    void SetCachedSize(int size) const final;

    void InternalSwap(test *other);

    friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;

    static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
        return "test";
    }

protected:
    explicit test(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
    static void ArenaDtor(void *object);

    inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:

    ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
    static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
        ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_base_2eproto);
        return ::descriptor_table_base_2eproto.file_level_metadata[kIndexInFileMessages];
    }

public:

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    enum : int {
        kInformFieldNumber = 2,
        kCmdFieldNumber = 1,
    };

    // string inform = 2;
    void clear_inform();

    const std::string &inform() const;

    void set_inform(const std::string &value);

    void set_inform(std::string &&value);

    void set_inform(const char *value);

    void set_inform(const char *value, size_t size);

    std::string *mutable_inform();

    std::string *release_inform();

    void set_allocated_inform(std::string *inform);

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    std::string *unsafe_arena_release_inform();

    GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
                                       "    string fields are deprecated and will be removed in a"
                                       "    future release.")
    void unsafe_arena_set_allocated_inform(
            std::string *inform);

private:
    const std::string &_internal_inform() const;

    void _internal_set_inform(const std::string &value);

    std::string *_internal_mutable_inform();

public:

    // int32 cmd = 1;
    void clear_cmd();

    ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;

    void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
    ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;

    void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);

public:

    // @@protoc_insertion_point(class_scope:test)
private:
    class _Internal;

    template<typename T> friend
    class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;

    typedef void InternalArenaConstructable_;
    typedef void DestructorSkippable_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inform_;
    ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    friend struct ::TableStruct_base_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// cmd

// int32 c = 1;
inline void cmd::clear_c() {
    c_ = 0;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 cmd::_internal_c() const {
    return c_;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 cmd::c() const {
    // @@protoc_insertion_point(field_get:cmd.c)
    return _internal_c();
}

inline void cmd::_internal_set_c(::PROTOBUF_NAMESPACE_ID::int32 value) {

    c_ = value;
}

inline void cmd::set_c(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_c(value);
    // @@protoc_insertion_point(field_set:cmd.c)
}

// -------------------------------------------------------------------

// client_gobang_position

// int32 cmd = 1;
inline void client_gobang_position::clear_cmd() {
    cmd_ = 0;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 client_gobang_position::_internal_cmd() const {
    return cmd_;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 client_gobang_position::cmd() const {
    // @@protoc_insertion_point(field_get:client_gobang_position.cmd)
    return _internal_cmd();
}

inline void client_gobang_position::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {

    cmd_ = value;
}

inline void client_gobang_position::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_cmd(value);
    // @@protoc_insertion_point(field_set:client_gobang_position.cmd)
}

// int32 x = 2;
inline void client_gobang_position::clear_x() {
    x_ = 0;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 client_gobang_position::_internal_x() const {
    return x_;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 client_gobang_position::x() const {
    // @@protoc_insertion_point(field_get:client_gobang_position.x)
    return _internal_x();
}

inline void client_gobang_position::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {

    x_ = value;
}

inline void client_gobang_position::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_x(value);
    // @@protoc_insertion_point(field_set:client_gobang_position.x)
}

// int32 y = 3;
inline void client_gobang_position::clear_y() {
    y_ = 0;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 client_gobang_position::_internal_y() const {
    return y_;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 client_gobang_position::y() const {
    // @@protoc_insertion_point(field_get:client_gobang_position.y)
    return _internal_y();
}

inline void client_gobang_position::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {

    y_ = value;
}

inline void client_gobang_position::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_y(value);
    // @@protoc_insertion_point(field_set:client_gobang_position.y)
}

// -------------------------------------------------------------------

// server_gobang_position

// int32 cmd = 1;
inline void server_gobang_position::clear_cmd() {
    cmd_ = 0;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 server_gobang_position::_internal_cmd() const {
    return cmd_;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 server_gobang_position::cmd() const {
    // @@protoc_insertion_point(field_get:server_gobang_position.cmd)
    return _internal_cmd();
}

inline void server_gobang_position::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {

    cmd_ = value;
}

inline void server_gobang_position::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_cmd(value);
    // @@protoc_insertion_point(field_set:server_gobang_position.cmd)
}

// int32 x = 2;
inline void server_gobang_position::clear_x() {
    x_ = 0;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 server_gobang_position::_internal_x() const {
    return x_;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 server_gobang_position::x() const {
    // @@protoc_insertion_point(field_get:server_gobang_position.x)
    return _internal_x();
}

inline void server_gobang_position::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {

    x_ = value;
}

inline void server_gobang_position::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_x(value);
    // @@protoc_insertion_point(field_set:server_gobang_position.x)
}

// int32 y = 3;
inline void server_gobang_position::clear_y() {
    y_ = 0;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 server_gobang_position::_internal_y() const {
    return y_;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 server_gobang_position::y() const {
    // @@protoc_insertion_point(field_get:server_gobang_position.y)
    return _internal_y();
}

inline void server_gobang_position::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {

    y_ = value;
}

inline void server_gobang_position::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_y(value);
    // @@protoc_insertion_point(field_set:server_gobang_position.y)
}

// -------------------------------------------------------------------

// client_login

// int32 cmd = 1;
inline void client_login::clear_cmd() {
    cmd_ = 0;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 client_login::_internal_cmd() const {
    return cmd_;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 client_login::cmd() const {
    // @@protoc_insertion_point(field_get:client_login.cmd)
    return _internal_cmd();
}

inline void client_login::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {

    cmd_ = value;
}

inline void client_login::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_cmd(value);
    // @@protoc_insertion_point(field_set:client_login.cmd)
}

// string username = 2;
inline void client_login::clear_username() {
    username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline const std::string &client_login::username() const {
    // @@protoc_insertion_point(field_get:client_login.username)
    return _internal_username();
}

inline void client_login::set_username(const std::string &value) {
    _internal_set_username(value);
    // @@protoc_insertion_point(field_set:client_login.username)
}

inline std::string *client_login::mutable_username() {
    // @@protoc_insertion_point(field_mutable:client_login.username)
    return _internal_mutable_username();
}

inline const std::string &client_login::_internal_username() const {
    return username_.Get();
}

inline void client_login::_internal_set_username(const std::string &value) {

    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}

inline void client_login::set_username(std::string &&value) {

    username_.Set(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:client_login.username)
}

inline void client_login::set_username(const char *value) {
            GOOGLE_DCHECK(value != nullptr);

    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
                  GetArena());
    // @@protoc_insertion_point(field_set_char:client_login.username)
}

inline void client_login::set_username(const char *value,
                                       size_t size) {

    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
            reinterpret_cast<const char *>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:client_login.username)
}

inline std::string *client_login::_internal_mutable_username() {

    return username_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline std::string *client_login::release_username() {
    // @@protoc_insertion_point(field_release:client_login.username)
    return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline void client_login::set_allocated_username(std::string *username) {
    if (username != nullptr) {

    } else {

    }
    username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
                           GetArena());
    // @@protoc_insertion_point(field_set_allocated:client_login.username)
}

inline std::string *client_login::unsafe_arena_release_username() {
    // @@protoc_insertion_point(field_unsafe_arena_release:client_login.username)
            GOOGLE_DCHECK(GetArena() != nullptr);

    return username_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                        GetArena());
}

inline void client_login::unsafe_arena_set_allocated_username(
        std::string *username) {
            GOOGLE_DCHECK(GetArena() != nullptr);
    if (username != nullptr) {

    } else {

    }
    username_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                      username, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client_login.username)
}

// string passwd = 3;
inline void client_login::clear_passwd() {
    passwd_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline const std::string &client_login::passwd() const {
    // @@protoc_insertion_point(field_get:client_login.passwd)
    return _internal_passwd();
}

inline void client_login::set_passwd(const std::string &value) {
    _internal_set_passwd(value);
    // @@protoc_insertion_point(field_set:client_login.passwd)
}

inline std::string *client_login::mutable_passwd() {
    // @@protoc_insertion_point(field_mutable:client_login.passwd)
    return _internal_mutable_passwd();
}

inline const std::string &client_login::_internal_passwd() const {
    return passwd_.Get();
}

inline void client_login::_internal_set_passwd(const std::string &value) {

    passwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}

inline void client_login::set_passwd(std::string &&value) {

    passwd_.Set(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:client_login.passwd)
}

inline void client_login::set_passwd(const char *value) {
            GOOGLE_DCHECK(value != nullptr);

    passwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
                GetArena());
    // @@protoc_insertion_point(field_set_char:client_login.passwd)
}

inline void client_login::set_passwd(const char *value,
                                     size_t size) {

    passwd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
            reinterpret_cast<const char *>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:client_login.passwd)
}

inline std::string *client_login::_internal_mutable_passwd() {

    return passwd_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline std::string *client_login::release_passwd() {
    // @@protoc_insertion_point(field_release:client_login.passwd)
    return passwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline void client_login::set_allocated_passwd(std::string *passwd) {
    if (passwd != nullptr) {

    } else {

    }
    passwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), passwd,
                         GetArena());
    // @@protoc_insertion_point(field_set_allocated:client_login.passwd)
}

inline std::string *client_login::unsafe_arena_release_passwd() {
    // @@protoc_insertion_point(field_unsafe_arena_release:client_login.passwd)
            GOOGLE_DCHECK(GetArena() != nullptr);

    return passwd_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                      GetArena());
}

inline void client_login::unsafe_arena_set_allocated_passwd(
        std::string *passwd) {
            GOOGLE_DCHECK(GetArena() != nullptr);
    if (passwd != nullptr) {

    } else {

    }
    passwd_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                    passwd, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:client_login.passwd)
}

// -------------------------------------------------------------------

// server_login

// int32 cmd = 1;
inline void server_login::clear_cmd() {
    cmd_ = 0;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 server_login::_internal_cmd() const {
    return cmd_;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 server_login::cmd() const {
    // @@protoc_insertion_point(field_get:server_login.cmd)
    return _internal_cmd();
}

inline void server_login::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {

    cmd_ = value;
}

inline void server_login::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_cmd(value);
    // @@protoc_insertion_point(field_set:server_login.cmd)
}

// string token = 2;
inline void server_login::clear_token() {
    token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline const std::string &server_login::token() const {
    // @@protoc_insertion_point(field_get:server_login.token)
    return _internal_token();
}

inline void server_login::set_token(const std::string &value) {
    _internal_set_token(value);
    // @@protoc_insertion_point(field_set:server_login.token)
}

inline std::string *server_login::mutable_token() {
    // @@protoc_insertion_point(field_mutable:server_login.token)
    return _internal_mutable_token();
}

inline const std::string &server_login::_internal_token() const {
    return token_.Get();
}

inline void server_login::_internal_set_token(const std::string &value) {

    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}

inline void server_login::set_token(std::string &&value) {

    token_.Set(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:server_login.token)
}

inline void server_login::set_token(const char *value) {
            GOOGLE_DCHECK(value != nullptr);

    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
               GetArena());
    // @@protoc_insertion_point(field_set_char:server_login.token)
}

inline void server_login::set_token(const char *value,
                                    size_t size) {

    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
            reinterpret_cast<const char *>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:server_login.token)
}

inline std::string *server_login::_internal_mutable_token() {

    return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline std::string *server_login::release_token() {
    // @@protoc_insertion_point(field_release:server_login.token)
    return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline void server_login::set_allocated_token(std::string *token) {
    if (token != nullptr) {

    } else {

    }
    token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
                        GetArena());
    // @@protoc_insertion_point(field_set_allocated:server_login.token)
}

inline std::string *server_login::unsafe_arena_release_token() {
    // @@protoc_insertion_point(field_unsafe_arena_release:server_login.token)
            GOOGLE_DCHECK(GetArena() != nullptr);

    return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                     GetArena());
}

inline void server_login::unsafe_arena_set_allocated_token(
        std::string *token) {
            GOOGLE_DCHECK(GetArena() != nullptr);
    if (token != nullptr) {

    } else {

    }
    token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                   token, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:server_login.token)
}

// -------------------------------------------------------------------

// test

// int32 cmd = 1;
inline void test::clear_cmd() {
    cmd_ = 0;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 test::_internal_cmd() const {
    return cmd_;
}

inline ::PROTOBUF_NAMESPACE_ID::int32 test::cmd() const {
    // @@protoc_insertion_point(field_get:test.cmd)
    return _internal_cmd();
}

inline void test::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {

    cmd_ = value;
}

inline void test::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
    _internal_set_cmd(value);
    // @@protoc_insertion_point(field_set:test.cmd)
}

// string inform = 2;
inline void test::clear_inform() {
    inform_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline const std::string &test::inform() const {
    // @@protoc_insertion_point(field_get:test.inform)
    return _internal_inform();
}

inline void test::set_inform(const std::string &value) {
    _internal_set_inform(value);
    // @@protoc_insertion_point(field_set:test.inform)
}

inline std::string *test::mutable_inform() {
    // @@protoc_insertion_point(field_mutable:test.inform)
    return _internal_mutable_inform();
}

inline const std::string &test::_internal_inform() const {
    return inform_.Get();
}

inline void test::_internal_set_inform(const std::string &value) {

    inform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}

inline void test::set_inform(std::string &&value) {

    inform_.Set(
            &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
    // @@protoc_insertion_point(field_set_rvalue:test.inform)
}

inline void test::set_inform(const char *value) {
            GOOGLE_DCHECK(value != nullptr);

    inform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
                GetArena());
    // @@protoc_insertion_point(field_set_char:test.inform)
}

inline void test::set_inform(const char *value,
                             size_t size) {

    inform_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
            reinterpret_cast<const char *>(value), size), GetArena());
    // @@protoc_insertion_point(field_set_pointer:test.inform)
}

inline std::string *test::_internal_mutable_inform() {

    return inform_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline std::string *test::release_inform() {
    // @@protoc_insertion_point(field_release:test.inform)
    return inform_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

inline void test::set_allocated_inform(std::string *inform) {
    if (inform != nullptr) {

    } else {

    }
    inform_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inform,
                         GetArena());
    // @@protoc_insertion_point(field_set_allocated:test.inform)
}

inline std::string *test::unsafe_arena_release_inform() {
    // @@protoc_insertion_point(field_unsafe_arena_release:test.inform)
            GOOGLE_DCHECK(GetArena() != nullptr);

    return inform_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                      GetArena());
}

inline void test::unsafe_arena_set_allocated_inform(
        std::string *inform) {
            GOOGLE_DCHECK(GetArena() != nullptr);
    if (inform != nullptr) {

    } else {

    }
    inform_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
                                    inform, GetArena());
    // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test.inform)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>

#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_base_2eproto
